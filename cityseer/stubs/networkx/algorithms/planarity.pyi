# Stubs for networkx.algorithms.planarity (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import networkx as nx
from typing import Any, Optional

def check_planarity(G: Any, counterexample: bool = ...): ...

class Interval:
    low: Any = ...
    high: Any = ...
    def __init__(self, low: Optional[Any] = ..., high: Optional[Any] = ...) -> None: ...
    def empty(self): ...
    def copy(self): ...
    def conflicting(self, b: Any, planarity_state: Any): ...

class ConflictPair:
    left: Any = ...
    right: Any = ...
    def __init__(self, left: Any = ..., right: Any = ...) -> None: ...
    def swap(self) -> None: ...
    def lowest(self, planarity_state: Any): ...

class LRPlanarity:
    G: Any = ...
    roots: Any = ...
    height: Any = ...
    lowpt: Any = ...
    lowpt2: Any = ...
    nesting_depth: Any = ...
    parent_edge: Any = ...
    DG: Any = ...
    adjs: Any = ...
    ordered_adjs: Any = ...
    ref: Any = ...
    side: Any = ...
    S: Any = ...
    stack_bottom: Any = ...
    lowpt_edge: Any = ...
    left_ref: Any = ...
    right_ref: Any = ...
    embedding: Any = ...
    def __init__(self, G: Any) -> None: ...
    def lr_planarity(self): ...
    def lr_planarity_recursive(self): ...
    def dfs_orientation(self, v: Any): ...
    def dfs_orientation_recursive(self, v: Any) -> None: ...
    def dfs_testing(self, v: Any): ...
    def dfs_testing_recursive(self, v: Any): ...
    def add_constraints(self, ei: Any, e: Any): ...
    def remove_back_edges(self, e: Any) -> None: ...
    def dfs_embedding(self, v: Any): ...
    def dfs_embedding_recursive(self, v: Any) -> None: ...
    def sign(self, e: Any): ...
    def sign_recursive(self, e: Any): ...

class PlanarEmbedding(nx.DiGraph):
    def get_data(self): ...
    def set_data(self, data: Any) -> None: ...
    def neighbors_cw_order(self, v: Any) -> None: ...
    def check_structure(self) -> None: ...
    def add_half_edge_ccw(self, start_node: Any, end_node: Any, reference_neighbor: Any) -> None: ...
    def add_half_edge_cw(self, start_node: Any, end_node: Any, reference_neighbor: Any) -> None: ...
    def connect_components(self, v: Any, w: Any) -> None: ...
    def add_half_edge_first(self, start_node: Any, end_node: Any) -> None: ...
    def next_face_half_edge(self, v: Any, w: Any): ...
    def traverse_face(self, v: Any, w: Any, mark_half_edges: Optional[Any] = ...): ...
    def is_directed(self): ...
