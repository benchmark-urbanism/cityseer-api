# Stubs for networkx.algorithms.centrality.flow_matrix (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def flow_matrix_row(G: Any, weight: Optional[Any] = ..., dtype: Any = ..., solver: str = ...) -> None: ...

class InverseLaplacian:
    dtype: Any = ...
    n: Any = ...
    w: Any = ...
    C: Any = ...
    L1: Any = ...
    def __init__(self, L: Any, width: Optional[Any] = ..., dtype: Optional[Any] = ...) -> None: ...
    def init_solver(self, L: Any) -> None: ...
    def solve(self, r: Any) -> None: ...
    def solve_inverse(self, r: Any) -> None: ...
    def get_rows(self, r1: Any, r2: Any): ...
    def get_row(self, r: Any): ...
    def width(self, L: Any): ...

class FullInverseLaplacian(InverseLaplacian):
    IL: Any = ...
    def init_solver(self, L: Any) -> None: ...
    def solve(self, rhs: Any): ...
    def solve_inverse(self, r: Any): ...

class SuperLUInverseLaplacian(InverseLaplacian):
    lusolve: Any = ...
    def init_solver(self, L: Any) -> None: ...
    def solve_inverse(self, r: Any): ...
    def solve(self, rhs: Any): ...

class CGInverseLaplacian(InverseLaplacian):
    M: Any = ...
    def init_solver(self, L: Any) -> None: ...
    def solve(self, rhs: Any): ...
    def solve_inverse(self, r: Any): ...

def laplacian_sparse_matrix(G: Any, nodelist: Optional[Any] = ..., weight: Optional[Any] = ..., dtype: Optional[Any] = ..., format: str = ...): ...
