# Stubs for networkx.algorithms.tree.branchings (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .recognition import *
import networkx as nx
from typing import Any, Optional

def branching_weight(G: Any, attr: str = ..., default: int = ...): ...
def greedy_branching(G: Any, attr: str = ..., default: int = ..., kind: str = ..., seed: Optional[Any] = ...): ...

class MultiDiGraph_EdgeKey(nx.MultiDiGraph):
    edge_index: Any = ...
    def __init__(self, incoming_graph_data: Optional[Any] = ..., **attr: Any) -> None: ...
    def remove_node(self, n: Any) -> None: ...
    def remove_nodes_from(self, nbunch: Any) -> None: ...
    def add_edge(self, u_for_edge: Any, v_for_edge: Any, key_for_edge: Any, **attr: Any) -> None: ...
    def add_edges_from(self, ebunch_to_add: Any, **attr: Any) -> None: ...
    def remove_edge_with_key(self, key: Any) -> None: ...
    def remove_edges_from(self, ebunch: Any) -> None: ...

class Edmonds:
    G_original: Any = ...
    store: bool = ...
    edges: Any = ...
    template: Any = ...
    def __init__(self, G: Any, seed: Optional[Any] = ...) -> None: ...
    def find_optimum(self, attr: str = ..., default: int = ..., kind: str = ..., style: str = ..., preserve_attrs: bool = ..., seed: Optional[Any] = ...): ...

def maximum_branching(G: Any, attr: str = ..., default: int = ..., preserve_attrs: bool = ...): ...
def minimum_branching(G: Any, attr: str = ..., default: int = ..., preserve_attrs: bool = ...): ...
def maximum_spanning_arborescence(G: Any, attr: str = ..., default: int = ..., preserve_attrs: bool = ...): ...
def minimum_spanning_arborescence(G: Any, attr: str = ..., default: int = ..., preserve_attrs: bool = ...): ...
