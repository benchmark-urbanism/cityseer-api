# Stubs for networkx.algorithms.tests.test_lowest_common_ancestors (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from nose.tools import *
import networkx as nx
from typing import Any, Optional

tree_all_pairs_lca = nx.tree_all_pairs_lowest_common_ancestor
all_pairs_lca = nx.all_pairs_lowest_common_ancestor

def get_pair(dictionary: Any, n1: Any, n2: Any): ...

class TestTreeLCA:
    DG: Any = ...
    ans: Any = ...
    gold: Any = ...
    def setUp(self) -> None: ...
    @staticmethod
    def assert_has_same_pairs(d1: Any, d2: Any) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor1(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor2(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor3(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor4(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor5(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor6(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor7(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor8(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor9(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor10(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor11(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor12(self) -> None: ...
    def test_not_implemented_for(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor13(self) -> None: ...

class TestDAGLCA:
    DG: Any = ...
    root_distance: Any = ...
    gold: Any = ...
    def setUp(self) -> None: ...
    def assert_lca_dicts_same(self, d1: Any, d2: Any, G: Optional[Any] = ...) -> None: ...
    def test_all_pairs_lowest_common_ancestor1(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor2(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor3(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor4(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor5(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor6(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor7(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor8(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor9(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor10(self) -> None: ...
    def test_lowest_common_ancestor1(self) -> None: ...
    def test_lowest_common_ancestor2(self) -> None: ...
