# Stubs for networkx.algorithms.operators.binary (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, TypeVar, Union, overload

from networkx.classes.graph import Graph

from networkx.classes.digraph import DiGraph


def disjoint_union(G: Any, H: Any): ...
def intersection(G: Any, H: Any): ...
def difference(G: Any, H: Any): ...
def symmetric_difference(G: Any, H: Any): ...



X = TypeVar('X', covariant=True)
Y = TypeVar('Y', covariant=True)
#GT = TypeVar('GT', bound=Graph)
#TODO: This does not handle the cases when graphs of different types are passed which is allowed

@overload
def compose(G: DiGraph[X], H: DiGraph[Y]) -> DiGraph[Union[X,Y]]: ...


@overload
def union(G: DiGraph[X], H: DiGraph[Y], rename: Any = ..., name: Optional[Any] = ...) -> DiGraph[Union[X,Y]]: ...

