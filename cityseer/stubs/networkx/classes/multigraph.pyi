# Stubs for networkx.classes.multigraph (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from networkx.classes.graph import Graph
from networkx.classes.coreviews import AdjacencyView

from typing import Any, Optional, TypeVar, Iterable, Union, Tuple, Dict

T = TypeVar('T')


class MultiGraph(Graph[T]):
    edge_key_dict_factory: Any = ...
    def to_directed_class(self): ...
    def to_undirected_class(self): ...
    def __init__(self, incoming_graph_data: Optional[Any] = ..., **attr: Any) -> None: ...
    @property
    def adj(self) -> AdjacencyView: ...
    def new_edge_key(self, u: Any, v: Any): ...
    def add_edge(self, u_for_edge: T, v_for_edge: T, key: Optional[Any] = ..., **attr: Any): ...
    def add_edges_from(self, ebunch_to_add: Iterable[Union[Tuple[T, T], Tuple[T, T, Dict[Any, Any]], Tuple[T, T, Dict[Any, Any], Any]]], **attr: Any): ...
    def remove_edge(self, u: Any, v: Any, key: Optional[Any] = ...) -> None: ...
    def remove_edges_from(self, ebunch: Any) -> None: ...
    def has_edge(self, u: Any, v: Any, key: Optional[Any] = ...): ...
    @property
    def edges(self): ...
    def get_edge_data(self, u: T, v: T, key: Optional[Any] = ..., default: Optional[Any] = ...): ...
    @property
    def degree(self): ...
    def is_multigraph(self) -> bool: ...
    def is_directed(self) -> bool: ...
    def copy(self, as_view: bool = ...) -> 'MultiGraph[T]': ...
    def to_directed(self, as_view: bool = ...): ...
    def to_undirected(self, as_view: bool = ...): ...
    def number_of_edges(self, u: Optional[Any] = ..., v: Optional[Any] = ...): ...
