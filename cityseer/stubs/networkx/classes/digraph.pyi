# Stubs for networkx.classes.digraph (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from networkx.classes.graph import Graph
from typing import Any, Optional, Iterator, overload, Tuple, List

from typing import TypeVar

from networkx.classes.reportviews import InDegreeView, OutDegreeView, InEdgeView, OutEdgeView

T = TypeVar('T')
class DiGraph(Graph[T]):
    graph_attr_dict_factory: Any = ...
    node_dict_factory: Any = ...
    node_attr_dict_factory: Any = ...
    adjlist_outer_dict_factory: Any = ...
    adjlist_inner_dict_factory: Any = ...
    edge_attr_dict_factory: Any = ...
    graph: Any = ...
    @overload
    def __init__(self, incoming_graph_data: DiGraph[T] = ..., **attr: Any) -> DiGraph[T]: ...

    # @overload
    # def __init__(self, incoming_graph_data: Optional[Any] = ..., **attr: Any) -> None: ...

    @overload
    def __init__(self, incoming_graph_data: List[Tuple[T, T]] = ..., **attr: Any) -> DiGraph[T]: ...

    @property
    def adj(self): ...
    @property
    def succ(self): ...
    @property
    def pred(self): ...
    def add_edge(self, u_of_edge: T, v_of_edge: T, **attr: Any) -> None: ...
    def add_edges_from(self, ebunch_to_add: Any, **attr: Any) -> None: ...
    def remove_edge(self, u: Any, v: Any) -> None: ...
    def remove_edges_from(self, ebunch: Any) -> None: ...
    def has_successor(self, u: Any, v: Any): ...
    def has_predecessor(self, u: Any, v: Any): ...
    def successors(self, n: T) -> Iterator[T]: ...
    neighbors: Any = ...
    def predecessors(self, n: T) -> Iterator[T]: ...
    @property
    def edges(self) -> OutEdgeView[T]: ...
    out_edges: OutEdgeView = ...
    @property
    def in_edges(self) -> InEdgeView[T]: ...
    @property
    def degree(self): ...
    @property
    def in_degree(self) -> InDegreeView[T]: ...
    @property
    def out_degree(self) -> OutDegreeView[T]: ...
    def clear(self) -> None: ...
    def is_multigraph(self): ...
    def is_directed(self): ...
    def to_undirected(self, reciprocal: bool = ..., as_view: bool = ...): ...
    def reverse(self, copy: bool = ...): ...
