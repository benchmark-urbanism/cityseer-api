"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping

"""Views of core data structures su"""
__all__ = ["AtlasView", "AdjacencyView", "MultiAdjacencyView", "UnionAtlas", "UnionAdjacency", "UnionMultiInner", "UnionMultiAdjacency", "FilterAtlas", "FilterAdjacency", "FilterMultiInner", "FilterMultiAdjacency"]
class AtlasView(Mapping):
    """An AtlasView is a Read-only Mapp"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, d) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> _SupportsNextT@iter:
        ...
    
    def __getitem__(self, key):
        ...
    
    def copy(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class AdjacencyView(AtlasView):
    """An AdjacencyView is a Read-only """
    __slots__ = ...
    def __getitem__(self, name): # -> AtlasView:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    


class MultiAdjacencyView(AdjacencyView):
    """An MultiAdjacencyView is a Read-"""
    __slots__ = ...
    def __getitem__(self, name): # -> AdjacencyView:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, dict[Unknown, Unknown]]]:
        ...
    


class UnionAtlas(Mapping):
    """A read-only union of two atlases"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, succ, pred) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Iterator[Unknown]:
        ...
    
    def __getitem__(self, key):
        ...
    
    def copy(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class UnionAdjacency(Mapping):
    """A read-only union of dict Adjace"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, succ, pred) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, nbr): # -> UnionAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class UnionMultiInner(UnionAtlas):
    """A read-only union of two inner d"""
    __slots__ = ...
    def __getitem__(self, node): # -> UnionAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    


class UnionMultiAdjacency(UnionAdjacency):
    """A read-only union of two dict Mu"""
    __slots__ = ...
    def __getitem__(self, node): # -> UnionMultiInner:
        ...
    


class FilterAtlas(Mapping):
    def __init__(self, d, NODE_OK) -> None:
        ...
    
    def __len__(self): # -> Literal[1, 0]:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, key):
        ...
    
    def copy(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class FilterAdjacency(Mapping):
    def __init__(self, d, NODE_OK, EDGE_OK) -> None:
        ...
    
    def __len__(self): # -> Literal[1, 0]:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, node): # -> FilterAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class FilterMultiInner(FilterAdjacency):
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, nbr): # -> FilterAtlas:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, Unknown]]:
        ...
    


class FilterMultiAdjacency(FilterAdjacency):
    def __getitem__(self, node): # -> FilterMultiInner:
        ...
    
    def copy(self): # -> dict[Unknown, dict[Unknown, dict[Unknown, Unknown]]]:
        ...
    


