"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping, Set

"""
View Classes provide node, edge"""
__all__ = ["NodeView", "NodeDataView", "EdgeView", "OutEdgeView", "InEdgeView", "EdgeDataView", "OutEdgeDataView", "InEdgeDataView", "MultiEdgeView", "OutMultiEdgeView", "InMultiEdgeView", "MultiEdgeDataView", "OutMultiEdgeDataView", "InMultiEdgeDataView", "DegreeView", "DiDegreeView", "InDegreeView", "OutDegreeView", "MultiDegreeView", "DiMultiDegreeView", "InMultiDegreeView", "OutMultiDegreeView"]
class NodeView(Mapping, Set):
    """A NodeView class to act as G.nod"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, graph) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, n):
        ...
    
    def __contains__(self, n): # -> bool:
        ...
    
    def __call__(self, data=..., default=...): # -> Self@NodeView | NodeDataView:
        ...
    
    def data(self, data=..., default=...): # -> Self@NodeView | NodeDataView:
        """
        Return a read-only view"""
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class NodeDataView(Set):
    """A DataView class for nodes of a """
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, nodedict, data=..., default=...) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> _SupportsNextT@iter | Generator[tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, n): # -> bool:
        ...
    
    def __getitem__(self, n): # -> Unknown:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class DiDegreeView:
    """A View class for degree of nodes"""
    def __init__(self, G, nbunch=..., weight=...) -> None:
        ...
    
    def __call__(self, nbunch=..., weight=...):
        ...
    
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | int], None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class DegreeView(DiDegreeView):
    """A DegreeView class to act as G.d"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | int], None, None]:
        ...
    


class OutDegreeView(DiDegreeView):
    """A DegreeView class to report out"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | Literal[0]], None, None]:
        ...
    


class InDegreeView(DiDegreeView):
    """A DegreeView class to report in_"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | Literal[0]], None, None]:
        ...
    


class MultiDegreeView(DiDegreeView):
    """A DegreeView class for undirecte"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | Literal[0]], None, None]:
        ...
    


class DiMultiDegreeView(DiDegreeView):
    """A DegreeView class for MultiDiGr"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | int], None, None]:
        ...
    


class InMultiDegreeView(DiDegreeView):
    """A DegreeView class for inward de"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | Literal[0]], None, None]:
        ...
    


class OutMultiDegreeView(DiDegreeView):
    """A DegreeView class for outward d"""
    def __getitem__(self, n): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, int] | tuple[Unknown, Unknown | Literal[0]], None, None]:
        ...
    


class OutEdgeDataView:
    """EdgeDataView for outward edges o"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown | dict[Unknown, Any | None] | bool | None]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, viewer, nbunch=..., data=..., default=...) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown] | tuple[Unknown, Unknown, Unknown | None], None, None]:
        ...
    
    def __contains__(self, e): # -> Literal[False]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class EdgeDataView(OutEdgeDataView):
    """A EdgeDataView class for edges o"""
    __slots__ = ...
    def __len__(self): # -> Literal[1, 0]:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown] | tuple[Unknown, Unknown, Unknown | None], None, None]:
        ...
    
    def __contains__(self, e): # -> Literal[False]:
        ...
    


class InEdgeDataView(OutEdgeDataView):
    """An EdgeDataView class for outwar"""
    __slots__ = ...
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown] | tuple[Unknown, Unknown, Unknown | None], None, None]:
        ...
    
    def __contains__(self, e): # -> Literal[False]:
        ...
    


class OutMultiEdgeDataView(OutEdgeDataView):
    """An EdgeDataView for outward edge"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown | dict[Unknown, Any | None]]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __init__(self, viewer, nbunch=..., data=..., keys=..., default=...) -> None:
        ...
    
    def __len__(self): # -> Literal[1, 0]:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    


class MultiEdgeDataView(OutMultiEdgeDataView):
    """An EdgeDataView class for edges """
    __slots__ = ...
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    


class InMultiEdgeDataView(OutMultiEdgeDataView):
    """An EdgeDataView for inward edges"""
    __slots__ = ...
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    


class OutEdgeView(Set, Mapping):
    """A EdgeView class for outward edg"""
    __slots__ = ...
    def __getstate__(self): # -> dict[str, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    dataview = OutEdgeDataView
    def __init__(self, G) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    
    def __getitem__(self, e):
        ...
    
    def __call__(self, nbunch=..., data=..., default=...): # -> Self@OutEdgeView | dataview:
        ...
    
    def data(self, data=..., default=..., nbunch=...): # -> Self@OutEdgeView | dataview:
        """
        Return a read-only view"""
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class EdgeView(OutEdgeView):
    """A EdgeView class for edges of a """
    __slots__ = ...
    dataview = EdgeDataView
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    


class InEdgeView(OutEdgeView):
    """A EdgeView class for inward edge"""
    __slots__ = ...
    def __setstate__(self, state): # -> None:
        ...
    
    dataview = InEdgeDataView
    def __init__(self, G) -> None:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    
    def __getitem__(self, e):
        ...
    


class OutMultiEdgeView(OutEdgeView):
    """A EdgeView class for outward edg"""
    __slots__ = ...
    dataview = OutMultiEdgeDataView
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    
    def __getitem__(self, e):
        ...
    
    def __call__(self, nbunch=..., data=..., keys=..., default=...): # -> Self@OutMultiEdgeView | dataview:
        ...
    
    def data(self, data=..., keys=..., default=..., nbunch=...): # -> Self@OutMultiEdgeView | dataview:
        ...
    


class MultiEdgeView(OutMultiEdgeView):
    """A EdgeView class for edges of a """
    __slots__ = ...
    dataview = MultiEdgeDataView
    def __len__(self): # -> Literal[1, 0]:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    


class InMultiEdgeView(OutMultiEdgeView):
    """A EdgeView class for inward edge"""
    __slots__ = ...
    def __setstate__(self, state): # -> None:
        ...
    
    dataview = InMultiEdgeDataView
    def __init__(self, G) -> None:
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Unknown, Unknown], None, None]:
        ...
    
    def __contains__(self, e): # -> bool:
        ...
    
    def __getitem__(self, e):
        ...
    


