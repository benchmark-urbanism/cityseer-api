"""
This type stub file was generated by pyright.
"""

from typing import Any, Literal, overload, Iterable
from networkx.classes.graph import Graph

from networkx.classes import multigraph, multidigraph
from networkx.classes.coreviews import MultiAdjacencyView
from networkx.classes.reportviews import MultiEdgeView, MultiDegreeView, NodeView

class MultiGraph(Graph):
    edge_key_dict_factory = Any
    def __init__(
        self,
        incoming_graph_data: Any | None = ...,
        multigraph_input: Any | None = ...,
        **attr
    ) -> None: ...
    
    @overload
    def nodes(self, data: Literal[False]) -> Iterable[str | int]: ...
    @overload
    def nodes(self, data: Literal[True]) -> Iterable[tuple[str | int, dict[str, Any]]]: ...

    @overload
    def edges(self, keys: Literal[True]) -> Iterable[tuple[int, int, int]]: ...
    @overload
    def edges(self, keys: Literal[False]) -> Iterable[tuple[int, int]]: ...

    def add_edge(self, u_for_edge: int, v_for_edge: int, key=..., **attr) -> None: ...
    def add_edges_from(self, ebunch_to_add: list[tuple[int, int]], **attr) -> None: ...
    def remove_edge(self, u: int, v: int, key=...) -> None: ...
    def remove_edges_from(self, ebunch: list[tuple[int, int]]) -> None: ...
    def has_edge(self, u: int, v: int, key=...): -> bool: ...
    def get_edge_data(self, u: int, v: int, key=..., default=...) -> None: ...
    @property
    def degree(self) -> MultiDegreeView: ...
    def is_multigraph(self) -> bool: ...
    def is_directed(self) -> bool: ...
    def copy(self) -> multigraph.MultiGraph: ...
    def to_directed(self, as_view=...) -> multidigraph.MultiDiGraph: ...
    def to_undirected(self, as_view=...): -> multigraph.MultiGraph: ...
    def number_of_edges(self) -> int: ...
