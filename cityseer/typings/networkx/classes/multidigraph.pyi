"""
This type stub file was generated by pyright.
"""

from networkx.classes.digraph import DiGraph
from networkx.classes.multigraph import MultiGraph

"""Base class for MultiDiGraph."""
__all__ = ["MultiDiGraph"]
class MultiDiGraph(MultiGraph, DiGraph):
    """A directed graph class that can """
    edge_key_dict_factory = ...
    def __init__(self, incoming_graph_data=..., multigraph_input=..., **attr) -> None:
        """Initialize a graph with edges, n"""
        ...
    
    @property
    def adj(self): # -> MultiAdjacencyView:
        """Graph adjacency object holding t"""
        ...
    
    @property
    def succ(self): # -> MultiAdjacencyView:
        """Graph adjacency object holding t"""
        ...
    
    @property
    def pred(self): # -> MultiAdjacencyView:
        """Graph adjacency object holding t"""
        ...
    
    def add_edge(self, u_for_edge, v_for_edge, key=..., **attr): # -> int:
        """Add an edge between u and v.

  """
        ...
    
    def remove_edge(self, u, v, key=...): # -> None:
        """Remove an edge between u and v.
"""
        ...
    
    @property
    def edges(self): # -> OutMultiEdgeView:
        """An OutMultiEdgeView of the Graph"""
        ...
    
    out_edges = ...
    @property
    def in_edges(self): # -> InMultiEdgeView:
        """An InMultiEdgeView of the Graph """
        ...
    
    @property
    def degree(self): # -> DiMultiDegreeView:
        """A DegreeView for the Graph as G."""
        ...
    
    @property
    def in_degree(self): # -> InMultiDegreeView:
        """A DegreeView for (node, in_degre"""
        ...
    
    @property
    def out_degree(self): # -> OutMultiDegreeView:
        """Returns an iterator for (node, o"""
        ...
    
    def is_multigraph(self): # -> Literal[True]:
        """Returns True if graph is a multi"""
        ...
    
    def is_directed(self): # -> Literal[True]:
        """Returns True if graph is directe"""
        ...
    
    def to_undirected(self, reciprocal=..., as_view=...): # -> Generator[Unknown, None, None] | MultiGraph:
        """Returns an undirected representa"""
        ...
    
    def reverse(self, copy=...): # -> Self@MultiDiGraph | Generator[Unknown, None, None]:
        """Returns the reverse of the graph"""
        ...
    


