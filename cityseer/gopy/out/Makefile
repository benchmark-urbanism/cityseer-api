# Makefile for python interface for package hello.
# File is generated by gopy. Do not edit.
# gopy build -output=out -vm=/usr/local/bin/python3 /Users/Shared/dev/github/cityseer/cityseer/cityseer/gopy/hello.go

GOCMD=go
GOBUILD=$(GOCMD) build
GOIMPORTS=goimports
PYTHON=/usr/local/bin/python3
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = -I/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/include/python3.8
LDFLAGS = -L/usr/local/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib -lpython3.8 -ldl   -framework CoreFoundation 

all: gen build

gen:
	gopy gen -no-make -vm=/usr/local/bin/python3 /Users/Shared/dev/github/cityseer/cityseer/cityseer/gopy/hello.go

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm hello.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w hello.go
	# generate hello_go$(LIBEXT) from hello.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o hello_go$(LIBEXT) hello.go
	# use pybindgen to build the hello.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# patch storage leaks in pybindgen output
	go run patch-leaks.go hello.c
	# build the _hello$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated hello.py python wrapper imports this c-code package
	$(GCC) hello.c -dynamiclib hello_go$(LIBEXT) -o _hello$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


