---
import Markdown from '@astrojs/markdown-component';
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-io">
    <a aria-hidden="true" href="#cityseer-tools-io" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.io
  </h1><Markdown is:raw>
Functions for fetching and cleaning OSM data.
</Markdown>
  <section class="yap func">
    <h2 class="yap func-title" id="buffered-point-poly">
      <a aria-hidden="true" href="#buffered-point-poly" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>buffered_point_poly
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>buffered_point_poly(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">lng, </div>
          <div class="yap func-sig-param">lat, </div>
          <div class="yap func-sig-param">buffer)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Buffer a point and return a `shapely` Polygon in WGS and UTM coordinates.

 This function can be used to prepare a `poly_wgs` `Polygon` for passing to [`osm_graph_from_poly()`](#osm-graph-from-poly).
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">lng</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The longitudinal WGS coordinate in degrees.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">lat</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The latitudinal WGS coordinate in degrees.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">buffer</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance in metres.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_wgs</div>
          <div class="yap doc-str-elem-type">Polygon</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `shapely` `Polygon` in WGS coordinates.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_utm</div>
          <div class="yap doc-str-elem-type">Polygon</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `shapely` `Polygon` in UTM coordinates.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">utm_zone_number</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The UTM zone number used for conversion.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">utm_zone_letter</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The UTM zone letter used for conversion.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="fetch-osm-network">
      <a aria-hidden="true" href="#fetch-osm-network" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>fetch_osm_network
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>fetch_osm_network(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">osm_request, </div>
          <div class="yap func-sig-param">timeout=300, </div>
          <div class="yap func-sig-param">max_tries=3)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Fetches an OSM response.

:::note
This function requires a valid OSM request. If you prepare a polygonal extents then it may be easier to use
[`osm_graph_from_poly()`](#osm-graph-from-poly), which would call this method on your behalf and then
builds a graph automatically.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">osm_request</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A valid OSM request as a string. Use [OSM Overpass](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) for testing custom queries.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">timeout</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Timeout duration for API call in seconds.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_tries</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of attempts to fetch a response before raising.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">Response</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An OSM API response.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="osm-graph-from-poly">
      <a aria-hidden="true" href="#osm-graph-from-poly" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>osm_graph_from_poly
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>osm_graph_from_poly(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">poly_geom, </div>
          <div class="yap func-sig-param">poly_epsg_code=4326, </div>
          <div class="yap func-sig-param">to_epsg_code=None, </div>
          <div class="yap func-sig-param">custom_request=None, </div>
          <div class="yap func-sig-param">simplify=True, </div>
          <div class="yap func-sig-param">remove_parallel=True, </div>
          <div class="yap func-sig-param">iron_edges=True, </div>
          <div class="yap func-sig-param">remove_disconnected=True, </div>
          <div class="yap func-sig-param">timeout=300, </div>
          <div class="yap func-sig-param">max_tries=3)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Prepares a `networkX` `MultiGraph` from an OSM request for the specified shapely polygon. This function will retrieve the OSM response and will automatically unpack this into a `networkX` graph. Simplification will be applied by default, but can be disabled.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_geom</div>
          <div class="yap doc-str-elem-type">Polygon</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A shapely Polygon representing the extents for which to fetch the OSM network.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_epsg_code</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An integer representing a valid EPSG code for the provided polygon. For example, [4326](https://epsg.io/4326) if using WGS lng / lat, or [27700](https://epsg.io/27700) if using the British National Grid.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">to_epsg_code</div>
          <div class="yap doc-str-elem-type">Optional[int]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional integer representing a valid EPSG code for the generated network returned from this function. If this parameter is provided, then the network will be converted to the specified EPSG coordinate reference system. If not provided, then the OSM network will be projected into a local UTM coordinate reference system.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">custom_request</div>
          <div class="yap doc-str-elem-type">str | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional custom OSM request. If provided, this must include a "geom_osm" string formatting key for inserting the geometry passed to the OSM API query. See the discussion below.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">simplify</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to automatically simplify the OSM graph. Set to False for manual cleaning.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">remove_parallel</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Ignored if simplify is False. Whether to remove parallel roadway segments.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">iron_edges</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Ignored if simplify is False.  Whether to straighten the ends of street segments. This can help to reduce the number of artefacts from segment kinks from merging `LineStrings`.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">remove_disconnected</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Ignored if simplify is False.  Whether to remove disconnected components from the network.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">timeout</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Timeout duration for API call in seconds.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_tries</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of attempts to fetch a response before raising.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes that have been converted to UTM. The network will be simplified if the `simplify` parameter is `True`.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
The default OSM request will attempt to find all walkable routes. It will ignore motorways and will try to work with pedestrianised routes and walkways.

 If you wish to provide your own OSM request, then provide a valid OSM API request as a string. The string must contain a `{geom_osm}` string formatting key. This allows for the geometry parameter passed to the OSM API to be injected into the request. It is also recommended to not use the `skel` output option so that `cityseer` can use street name and highway reference information for cleaning purposes. See [OSM Overpass](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) for experimenting with custom queries.

 For example, to return only drivable roads, then use a request similar to the following. Notice the `{geom_osm}` formatting key and the use of `out qt;` instead of `out skel qt;`.

```python
custom_request = f'''
[out:json];
(
way["highway"]
["area"!="yes"]
["highway"!~"footway|pedestrian|steps|bus_guideway|escape|raceway|proposed|planned|abandoned|platform|construction"]
(poly:"{geom_osm}");
);
out body;
>;
out qt;
'''
```

</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-osm-nx">
      <a aria-hidden="true" href="#nx-from-osm-nx" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_osm_nx
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_osm_nx(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multidigraph, </div>
          <div class="yap func-sig-param">node_attributes=None, </div>
          <div class="yap func-sig-param">edge_attributes=None, </div>
          <div class="yap func-sig-param">tolerance=config.ATOL)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Copy an [`OSMnx`](https://osmnx.readthedocs.io/) directed `MultiDiGraph` to an undirected `cityseer` `MultiGraph`.

 See the [`OSMnx`](/guide#osm-and-networkx) section of the guide for a more general discussion (and example) on workflows combining `OSMnx` with `cityseer`.

 `x` and `y` node attributes will be copied directly and `geometry` edge attributes will be copied to a `geom` edge attribute. The conversion process will snap the `shapely` `LineString` endpoints to the corresponding start and end node coordinates.

 Note that `OSMnx` `geometry` attributes only exist for simplified edges: if a `geometry` edge attribute is not found, then a simple (straight) `shapely` `LineString` geometry will be inferred from the respective start and end nodes.

 Other attributes will be ignored to avoid potential downstream misinterpretations of the attributes as a consequence of subsequent steps of graph manipulation, i.e. to avoid situations where attributes may fall out of lock-step with the state of the graph. If particular attributes need to be copied across, and assuming cognisance of downstream implications, then these can be manually specified by providing a list of node attributes keys per the `node_attributes` parameter or edge attribute keys per the `edge_attributes` parameter.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multidigraph</div>
          <div class="yap doc-str-elem-type">MultiDiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `OSMnx` derived `networkX` `MultiDiGraph` containing `x` and `y` node attributes, with optional `geometry` edge attributes containing `LineString` geoms (for simplified edges).
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_attributes</div>
          <div class="yap doc-str-elem-type">Optional[list[str] | tuple[str]]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Optional node attributes to copy to the new MultiGraph. (In addition to the default `x` and `y` attributes.)
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_attributes</div>
          <div class="yap doc-str-elem-type">Optional[list[str] | tuple[str]]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Optional edge attributes to copy to the new MultiGraph. (In addition to the optional `geometry` attribute.)
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">tolerance</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Tolerance at which to raise errors for mismatched geometry end-points vis-a-vis corresponding node coordinates. Prior to conversion, this method will check edge geometry end-points for alignment with the corresponding end-point nodes. Where these don't align within the given tolerance an exception will be raised. Otherwise, if within the tolerance, the conversion function will snap the geometry end-points to the corresponding node coordinates so that downstream exceptions are not subsequently raised. It is preferable to minimise graph manipulation prior to conversion to a `cityseer` compatible `MultiGraph` otherwise particularly large tolerances may be required, and this may lead to some unexpected or undesirable effects due to aggressive snapping.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `cityseer` compatible `networkX` graph with `x` and `y` node attributes and `geom` edge attributes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-open-roads">
      <a aria-hidden="true" href="#nx-from-open-roads" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_open_roads
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_open_roads(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">open_roads_path, </div>
          <div class="yap func-sig-param">target_bbox=None)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generates a `networkX` `MultiGraph` from an OS Open Roads dataset.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">open_roads_path</div>
          <div class="yap doc-str-elem-type">Path]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A valid relative filepath from which to load the OS Open Roads dataset.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">target_bbox</div>
          <div class="yap doc-str-elem-type">BboxType]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple of integers or floats representing the `[s, w, n, e]` bounding box extents for which to load the dataset. Set to `None` for no bounding box.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `cityseer` compatible `networkX` graph with `x` and `y` node attributes and `geom` edge attributes.
</Markdown></div>
      </div>
    </div>
  </section>
</div>
</PageLayout>

