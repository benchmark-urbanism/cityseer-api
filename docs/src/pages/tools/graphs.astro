---
import Markdown from '@astrojs/markdown-component';
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-graphs">
    <a aria-hidden="true" href="#cityseer-tools-graphs" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.graphs
  </h1><Markdown is:raw>
Convenience functions for the preparation and conversion of `networkX` graphs to and from `cityseer` data structures.

 Note that the `cityseer` network data structures can be created and manipulated directly, if so desired.
</Markdown>
  <section class="yap func">
    <h2 class="yap func-title" id="snap-linestring-startpoint">
      <a aria-hidden="true" href="#snap-linestring-startpoint" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>snap_linestring_startpoint
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>snap_linestring_startpoint(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">linestring_coords, </div>
          <div class="yap func-sig-param">x_y)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Snaps a LineString's start-point coordinate to a specified x_y coordinate.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">linestring_coords</div>
          <div class="yap doc-str-elem-type">AnyCoordsType</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A list, tuple, or numpy array of x, y coordinate tuples.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_y</div>
          <div class="yap doc-str-elem-type">CoordsType</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple of floats representing the target x, y coordinates against which to align the linestring start point.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">linestring_coords</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A list of linestring coords aligned to the specified starting point.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="snap-linestring-endpoint">
      <a aria-hidden="true" href="#snap-linestring-endpoint" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>snap_linestring_endpoint
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>snap_linestring_endpoint(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">linestring_coords, </div>
          <div class="yap func-sig-param">x_y)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Snaps a LineString's end-point coordinate to a specified x_y coordinate.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">linestring_coords</div>
          <div class="yap doc-str-elem-type">AnyCoordsType</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A list, tuple, or numpy array of x, y coordinate tuples.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_y</div>
          <div class="yap doc-str-elem-type">CoordsType</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple of floats representing the target x, y coordinates against which to align the linestring end point.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">linestring_coords</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A list of linestring coords aligned to the specified ending point.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="align-linestring-coords">
      <a aria-hidden="true" href="#align-linestring-coords" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>align_linestring_coords
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>align_linestring_coords(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">linestring_coords, </div>
          <div class="yap func-sig-param">x_y, </div>
          <div class="yap func-sig-param">reverse=False, </div>
          <div class="yap func-sig-param">tolerance=0.5)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Align a LineString's coordinate order to either start or end at a specified x_y coordinate within a given tolerance.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">linestring_coords</div>
          <div class="yap doc-str-elem-type">AnyCoordsType</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A list, tuple, or numpy array of x, y coordinate tuples.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_y</div>
          <div class="yap doc-str-elem-type">CoordsType</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple of floats representing the target x, y coordinates against which to align the linestring coords.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">reverse</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
If reverse=False the coordinate order will be aligned to start from the given x_y coordinate. If reverse=True the coordinate order will be aligned to end at the given x_y coordinate.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">tolerance</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Distance tolerance in metres for matching the x_y coordinate to the linestring_coords.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">linestring_coords</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A list of linestring coords aligned to the specified endpoint.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap class">
    <h2 class="yap class-title" id="edgeinfo">
      <a aria-hidden="true" href="#edgeinfo" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>_EdgeInfo
    </h2>
    <h3 class="yap">Properties</h3>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">names</div>
        <div class="yap class-prop-def-type"></div>
      </div>
      <div class="yap class-prop-def-desc">Returns a set of street names.</div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">routes</div>
        <div class="yap class-prop-def-type"></div>
      </div>
      <div class="yap class-prop-def-desc">Returns a set of routes - e.g. route numbers.</div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">highways</div>
        <div class="yap class-prop-def-type"></div>
      </div>
      <div class="yap class-prop-def-desc">Returns a set of highway types - e.g. footway.</div>
    </div>
    <h3 class="yap">Methods</h3>
    <section class="yap func">
      <h2 class="yap func-title" id="edgeinfo-init">
        <a aria-hidden="true" href="#edgeinfo-init" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>_EdgeInfo.__init__
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>_EdgeInfo()</span>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Initialises a network information structure.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="edgeinfo-gather-edge-info">
        <a aria-hidden="true" href="#edgeinfo-gather-edge-info" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>_EdgeInfo.gather_edge_info
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>gather_edge_info(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">edge_data)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Gather edge data from provided edge_data.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="edgeinfo-set-edge-info">
        <a aria-hidden="true" href="#edgeinfo-set-edge-info" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>_EdgeInfo.set_edge_info
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>set_edge_info(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">nx_multigraph, </div>
            <div class="yap func-sig-param">start_node_key, </div>
            <div class="yap func-sig-param">end_node_key, </div>
            <div class="yap func-sig-param">edge_idx)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Set accumulated edge data to specified graph and edge.
</Markdown></div>
    </section>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-simple-geoms">
      <a aria-hidden="true" href="#nx-simple-geoms" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_simple_geoms
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_simple_geoms(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">simplify_dist=5)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Inferring geometries from node to node.

 Infers straight-lined geometries connecting the `x` and `y` coordinates of each node-pair. The resultant edge geometry will be stored to each edge's `geom` attribute.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">simplify_dist</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Simplification distance to use for simplifying the linestring geometries.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `shapely` [`Linestring`](https://shapely.readthedocs.io/en/latest/manual.html#linestrings) geometries assigned to the edge `geom` attributes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-osm">
      <a aria-hidden="true" href="#nx-from-osm" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_osm
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_osm(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">osm_json)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a `NetworkX` `MultiGraph` from [Open Street Map](https://www.openstreetmap.org) data.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">osm_json</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `json` string response from the [OSM overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API), consisting of `nodes` and `ways`.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` `MultiGraph` with `x` and `y` attributes in [WGS84](https://epsg.io/4326) `lng`, `lat` geographic coordinates.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-epsg-conversion">
      <a aria-hidden="true" href="#nx-epsg-conversion" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_epsg_conversion
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_epsg_conversion(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">from_epsg_code, </div>
          <div class="yap func-sig-param">to_epsg_code)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convert a graph from the `from_epsg_code` EPSG CRS to the `to_epsg_code` EPSG CRS.

 The `to_epsg_code` must be for a projected CRS. If edge `geom` attributes are found, the associated `LineString` geometries will also be converted.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes in the `from_epsg_code` coordinate system. Optional `geom` edge attributes containing `LineString` geoms to be converted.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">from_epsg_code</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An integer representing a valid EPSG code specifying the CRS from which the graph must be converted. For example, [4326](https://epsg.io/4326) if converting data from an OpenStreetMap response.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">to_epsg_code</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An integer representing a valid EPSG code specifying the CRS into which the graph must be projected. For example, [27700](https://epsg.io/27700) if converting to British National Grid.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes converted to the specified `to_epsg_code` coordinate system. Edge `geom` attributes will also be converted if found.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-wgs-to-utm">
      <a aria-hidden="true" href="#nx-wgs-to-utm" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_wgs_to_utm
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_wgs_to_utm(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">force_zone_number=None)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convert a graph from WGS84 geographic coordinates to UTM projected coordinates.

 Converts `x` and `y` node attributes from [WGS84](https://epsg.io/4326) `lng`, `lat` geographic coordinates to the local UTM projected coordinate system. If edge `geom` attributes are found, the associated `LineString` geometries will also be converted. The UTM zone derived from the first processed node will be used for the conversion of all other nodes and geometries contained in the graph. This ensures consistent behaviour in cases where a graph spans a UTM boundary.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes in the WGS84 coordinate system. Optional `geom` edge attributes containing `LineString` geoms to be converted.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">force_zone_number</div>
          <div class="yap doc-str-elem-type">Optional[int]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional UTM zone number for coercing all conversions to an explicit UTM zone. Use with caution: mismatched UTM zones may introduce substantial distortions in the results.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes converted to the local UTM coordinate system. If edge `geom` attributes are present, these will also be converted.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-remove-filler-nodes">
      <a aria-hidden="true" href="#nx-remove-filler-nodes" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_remove_filler_nodes
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_remove_filler_nodes(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Remove nodes of degree=2.

 Nodes of degree=2 represent no route-choice options other than traversal to the next edge. These are frequently found on network topologies as a means of describing roadway geometry, but are meaningless from a network topology point of view. This method will find and deleted these nodes, and replaces the two edges on either side with a new spliced edge. The new edge's `geom` attribute will retain the geometric properties of the original edges.

:::note
Filler nodes may be prevalent in poor quality datasets, or in situations where curved roadways have been represented
through the addition of nodes to describe arced geometries. `cityseer` uses `shapely` `Linestrings` to describe
arbitrary road geometries without the need for filler nodes. Filler nodes can therefore be removed, thus reducing
side-effects as a function of varied node intensities when computing network centralities.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with nodes of degree=2 removed. Adjacent edges will be combined into a unified new edge with associated `geom` attributes spliced together.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-remove-dangling-nodes">
      <a aria-hidden="true" href="#nx-remove-dangling-nodes" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_remove_dangling_nodes
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_remove_dangling_nodes(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">despine=None, </div>
          <div class="yap func-sig-param">remove_disconnected=True, </div>
          <div class="yap func-sig-param">cleanup_filler_nodes=True)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Remove disconnected components and optionally removes short dead-end street stubs.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">despine</div>
          <div class="yap doc-str-elem-type">Optional[float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The maximum cutoff distance for removal of dead-ends. Use `None` or `0` where no despining should occur. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">remove_disconnected</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to remove disconnected components. If set to `True`, only the largest connected component will be returned. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">cleanup_filler_nodes</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Removal of dangling nodes can result in "filler nodes" of degree two where dangling streets were removed. If cleanup_filler_nodes is `True` then these will be removed.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with disconnected components optionally removed, and dead-ends removed where less than the `despine` parameter distance.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="merge-parallel-edges">
      <a aria-hidden="true" href="#merge-parallel-edges" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>merge_parallel_edges
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>merge_parallel_edges(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">merge_edges_by_midline, </div>
          <div class="yap func-sig-param">contains_buffer_dist)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Check a MultiGraph for duplicate edges; which, if found, will be merged.

 The shortest of these parallel edges is selected and buffered by `contains_buffer_dist`. If this buffer contains an adjacent edge, then the adjacent edge is merged. Edges falling outside this buffer are retained.

 When candidate edges are found for merging, they are replaced by a single new edge. The new geometry selected from either:
- An imaginary centreline of the combined edges if `merge_edges_by_midline` is set to `True`;
- Else, the shortest edge is retained, with longer edges discarded.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">merge_edges_by_midline</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to merge parallel edges by an imaginary centreline. If set to False, then the shortest edge will be retained as the new geometry and the longer edges will be discarded. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">contains_buffer_dist</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to consider when checking if parallel edges are sufficiently similar to be merged.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with consolidated nodes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-snap-endpoints">
      <a aria-hidden="true" href="#nx-snap-endpoints" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_snap_endpoints
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_snap_endpoints(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Snaps geom endpoints to adjacent node coordinates.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph`.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-iron-edges">
      <a aria-hidden="true" href="#nx-iron-edges" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_iron_edges
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_iron_edges(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Simplifies edges.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with simplified edges.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-consolidate-nodes">
      <a aria-hidden="true" href="#nx-consolidate-nodes" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_consolidate_nodes
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_consolidate_nodes(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">buffer_dist=5, </div>
          <div class="yap func-sig-param">neighbour_policy=None, </div>
          <div class="yap func-sig-param">crawl=False, </div>
          <div class="yap func-sig-param">centroid_by_straightness=True, </div>
          <div class="yap func-sig-param">centroid_by_min_len_factor=None, </div>
          <div class="yap func-sig-param">merge_edges_by_midline=True, </div>
          <div class="yap func-sig-param">contains_buffer_dist=20)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Consolidates nodes if they are within a buffer distance of each other.

 Several parameters provide more control over the conditions used for deciding whether or not to merge nodes. The algorithm proceeds in two steps:

 Nodes within the buffer distance of each other are merged. A new centroid will be determined and all existing edge endpoints will be updated accordingly. The new centroid for the merged nodes can be based on:
- The centroid of the node group;
- Else, all nodes of degree greater or equal to `cent_min_degree`;
- Else, all nodes with aggregate adjacent edge lengths greater than a factor of `centroid_by_min_len_factor` of the node with the greatest aggregate length for adjacent edges.

 The merging of nodes can create parallel edges with mutually shared nodes on either side. These edges are replaced by a single new edge, with the new geometry selected from either:
- An imaginary centreline of the combined edges if `merge_edges_by_midline` is set to `True`;
- Else, the shortest edge, with longer edges discarded; See [`merge_parallel_edges`](#merge-parallel-edges) for more information.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">buffer_dist</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to be used for consolidating nearby nodes. Defaults to 5.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">neighbour_policy</div>
          <div class="yap doc-str-elem-type">str | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether all nodes within the buffer distance are merged, or only "direct" or "indirect" neighbours. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">crawl</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether the algorithm will recursively explore neighbours of neighbours if those neighbours are within the buffer distance from the prior node. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">centroid_by_straightness</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to use an intersection straightness heuristic to select new centroids. True by default.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">centroid_by_min_len_factor</div>
          <div class="yap doc-str-elem-type">Optional[float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The minimum aggregate adjacent edge lengths an existing node should have to be considered when calculating the centroid for the new node cluster. Expressed as a factor of the node with the greatest aggregate adjacent edge lengths. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">merge_edges_by_midline</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to merge parallel edges by an imaginary centreline. If set to False, then the shortest edge will be retained as the new geometry and the longer edges will be discarded. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">contains_buffer_dist</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to consider when checking if parallel edges are sufficiently similar to be merged.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with consolidated nodes.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
See the guide on [graph cleaning](/guide#graph-cleaning) for more information.

![Example raw graph from OSM](/images/graph_cleaning_1.png) _The pre-consolidation OSM street network for Soho, London. © OpenStreetMap contributors._

![Example cleaned graph](/images/graph_cleaning_5.png) _The consolidated OSM street network for Soho, London. © OpenStreetMap contributors._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-split-opposing-geoms">
      <a aria-hidden="true" href="#nx-split-opposing-geoms" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_split_opposing_geoms
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_split_opposing_geoms(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">buffer_dist=10, </div>
          <div class="yap func-sig-param">merge_edges_by_midline=True, </div>
          <div class="yap func-sig-param">contains_buffer_dist=20)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Split edges opposite nodes on parallel edge segments if within a buffer distance.

 This facilitates merging parallel roadways through subsequent use of [`nx-consolidate-nodes`](#nx-consolidate-nodes).

 The merging of nodes can create parallel edges with mutually shared nodes on either side. These edges are replaced by a single new edge, with the new geometry selected from either:
- An imaginary centreline of the combined edges if `merge_edges_by_midline` is set to `True`;
- Else, the shortest edge, with longer edges discarded; See [`merge_parallel_edges`](#merge-parallel-edges) for more information.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">buffer_dist</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to be used for splitting nearby nodes. Defaults to 5.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">merge_edges_by_midline</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to merge parallel edges by an imaginary centreline. If set to False, then the shortest edge will be retained as the new geometry and the longer edges will be discarded. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">contains_buffer_dist</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to consider when checking if parallel edges are sufficiently similar to be merged.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with consolidated nodes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-decompose">
      <a aria-hidden="true" href="#nx-decompose" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_decompose
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_decompose(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">decompose_max)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Decomposes a graph so that no edge is longer than a set maximum.

 Decomposition provides a more granular representation of potential variations along street lengths, while reducing network centrality side-effects that arise as a consequence of varied node densities.

:::note
Setting the `decompose` parameter too small in relation to the size of the graph may increase the computation time
unnecessarily for subsequent analysis. For larger-scale urban analysis, it is generally not necessary to go smaller
20m, and 50m may already be sufficient for the majority of cases.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div><Markdown is:raw>
decompose_max: float The maximum length threshold for decomposed edges.
</Markdown>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A decomposed `networkX` graph with no edge longer than the `decompose_max` parameter. If `live` node attributes were provided, then the `live` attribute for child-nodes will be set to `True` if either or both parent nodes were `live`. Otherwise, all nodes wil be set to `live=True`. The `length` and `imp_factor` edge attributes will be set to match the lengths of the new edges.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
```python
from cityseer.tools import mock, graphs, plot

G = mock.mock_graph()
G_simple = graphs.nx_simple_geoms(G)
G_decomposed = graphs.nx_decompose(G_simple, 100)
plot.plot_nx(G_decomposed)
```


![Example graph](/images/graph_simple.png) _Example graph prior to decomposition._

![Example decomposed graph](/images/graph_decomposed.png) _Example graph after decomposition._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-to-dual">
      <a aria-hidden="true" href="#nx-to-dual" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_to_dual
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_to_dual(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convert a primal graph representation to the dual representation.

 Primal graphs represent intersections as nodes and streets as edges. This method will invert this representation so that edges are converted to nodes and intersections become edges. Primal edge `geom` attributes will be welded to adjacent edges and split into the new dual edge `geom` attributes.

:::note
Note that a `MultiGraph` is useful for primal but not for dual, so the output `MultiGraph` will have single edges.
e.g. a crescent street that spans the same intersections as parallel straight street requires multiple edges in
primal. The same type of situation does not arise in the dual because the nodes map to distinct edges regardless.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A dual representation `networkX` graph. The new dual nodes will have `x` and `y` node attributes corresponding to the mid-points of the original primal edges. If `live` node attributes were provided, then the `live` attribute for the new dual nodes will be set to `True` if either or both of the adjacent primal nodes were set to `live=True`. Otherwise, all dual nodes wil be set to `live=True`. The primal `geom` edge attributes will be split and welded to form the new dual `geom` edge attributes. A `parent_primal_node` edge attribute will be added, corresponding to the node identifier of the primal graph.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
```python
from cityseer.tools import graphs, mock, plot

G = mock.mock_graph()
G_simple = graphs.nx_simple_geoms(G)
G_dual = graphs.nx_to_dual(G_simple)
plot.plot_nx_primal_or_dual(G_simple,
                            G_dual,
                            plot_geoms=False)
```


![Example dual graph](/images/graph_dual.png) _Dual graph (blue) overlaid on the source primal graph (red)._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="network-structure-from-nx">
      <a aria-hidden="true" href="#network-structure-from-nx" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>network_structure_from_nx
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>network_structure_from_nx(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">crs)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Transpose a `networkX` `MultiGraph` into a `GeoDataFrame` and `NetworkStructure` for use by `cityseer`.

 Calculates length and angle attributes, as well as in and out bearings, and stores this information in the returned data maps.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">crs</div>
          <div class="yap doc-str-elem-type">Union[str, int]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
CRS for initialising the returned structures. This is used for initialising the GeoPandas [`GeoDataFrame`](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.html#geopandas-geodataframe).
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nodes_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with `live` and `geometry` attributes. The original `networkX` graph's node keys will be used for the `GeoDataFrame` index.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edges_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with `ns_edge_idx`, `start_ns_node_idx`, `end_ns_node_idx`, `edge_idx`, `nx_start_node_key`, `nx_end_node_key`, `length`, `angle_sum`, `imp_factor`, `in_bearing`, `out_bearing`, `total_bearing`, `geom` attributes.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">network_structure</div>
          <div class="yap doc-str-elem-type">NetworkStructure</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A [`rustalgos.NetworkStructure`](/rustalgos#networkstructure) instance.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="blend-metrics">
      <a aria-hidden="true" href="#blend-metrics" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>blend_metrics
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>blend_metrics(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nodes_gdf, </div>
          <div class="yap func-sig-param">edges_gdf, </div>
          <div class="yap func-sig-param">method)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Blends metrics from a nodes GeoDataFrame into an edges GeoDataFrame.

 This is useful for situations where it is preferable to visualise the computed metrics as LineStrings instead of points. The line will be assigned the value from the adjacent two nodes based on the selected "min", "max", or "avg" method.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nodes_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A nodes `GeoDataFrame` as derived from [`network_structure_from_nx`](#network-structure-from-nx).
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edges_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An edges `GeoDataFrame` as derived from [`network_structure_from_nx`](#network-structure-from-nx).
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">method</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The method used for determining the line value from the adjacent points. Must be one of "min", "max", or "avg".
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">merged_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An edges `GeoDataFrame` created by merging the node metrics from the provided nodes `GeoDataFrame` into the provided edges `GeoDataFrame`.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-geopandas">
      <a aria-hidden="true" href="#nx-from-geopandas" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_geopandas
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_geopandas(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nodes_gdf, </div>
          <div class="yap func-sig-param">edges_gdf)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Write nodes and edges `GeoDataFrames` to a `networkX` `MultiGraph`.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nodes_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with `live` and Point `geometry` attributes. The index will be used for the returned `networkX` graph's node keys.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edges_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An edges `GeoDataFrame` as derived from [`network_structure_from_nx`](#network-structure-from-nx).
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` graph with geometries and attributes as copied from the input `GeoDataFrames`.
</Markdown></div>
      </div>
    </div>
  </section>
</div>
</PageLayout>

