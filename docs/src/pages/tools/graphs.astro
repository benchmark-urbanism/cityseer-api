---
import { Markdown } from 'astro/components'
import ArXivLink from '@src/components/ArXivLink.vue'
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-graphs">
    <a aria-hidden="true" href="#cityseer-tools-graphs" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.graphs
  </h1><Markdown is:raw>
Convenience functions for the preparation and conversion of `networkX` graphs to and from `cityseer` data structures.

 Note that the `cityseer` network data structures can be created and manipulated directly, if so desired.
</Markdown>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-simple-geoms">
      <a aria-hidden="true" href="#nx-simple-geoms" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_simple_geoms
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_simple_geoms(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate straight-line geometries for each edge. Prepares &quot;simple&quot; straight-lined geometries spanning the `x` and `y` coordinates of each node-pair. The resultant edge geometry will be stored to the edge `geom` attribute.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `shapely` [`Linestring`](https://shapely.readthedocs.io/en/latest/manual.html#linestrings) geometries assigned to the edge `geom` attributes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-osm">
      <a aria-hidden="true" href="#nx-from-osm" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_osm
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_osm(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">osm_json)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a `NetworkX` `MultiGraph` from [Open Street Map](https://www.openstreetmap.org) data.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">osm_json</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `json` string response from the [OSM overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API), consisting of `nodes` and `ways`.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` `MultiGraph` with `x` and `y` attributes in [WGS84](https://epsg.io/4326) `lng`, `lat` geographic coordinates.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-wgs-to-utm">
      <a aria-hidden="true" href="#nx-wgs-to-utm" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_wgs_to_utm
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_wgs_to_utm(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">force_zone_number)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convert a graph from WGS84 geographic coordinates to UTM projected coordinates. Converts `x` and `y` node attributes from [WGS84](https://epsg.io/4326) `lng`, `lat` geographic coordinates to the local UTM projected coordinate system. If edge `geom` attributes are found, the associated `LineString` geometries will also be converted. The UTM zone derived from the first processed node will be used for the conversion of all other nodes and geometries contained in the graph. This ensures consistent behaviour in cases where a graph spans a UTM boundary.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes in the WGS84 coordinate system. Optional `geom` edge attributes containing `LineString` geoms to be converted.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">force_zone_number</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional UTM zone number for coercing all conversions to an explicit UTM zone. Use with caution: mismatched UTM zones may introduce substantial distortions in the results. By Default None.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes converted to the local UTM coordinate system. If edge `geom` attributes are present, these will also be converted.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-remove-dangling-nodes">
      <a aria-hidden="true" href="#nx-remove-dangling-nodes" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_remove_dangling_nodes
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_remove_dangling_nodes(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">despine, </div>
          <div class="yap func-sig-param">remove_disconnected=True)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Remove disconnected components and optionally removes short dead-end street stubs.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">despine</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The maximum cutoff distance for removal of dead-ends. Use `None` or `0` where no despining should occur. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">remove_disconnected</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to remove disconnected components. If set to `True`, only the largest connected component will be returned. Defaults to True.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with disconnected components optionally removed, and dead-ends removed where less than the `despine` parameter distance.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap class">
    <h2 class="yap class-title" id="edgeinfo">
      <a aria-hidden="true" href="#edgeinfo" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>_EdgeInfo
    </h2>
    <h3 class="yap">Properties</h3>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">names</div>
        <div class="yap class-prop-def-type"></div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">refs</div>
        <div class="yap class-prop-def-type"></div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">highways</div>
        <div class="yap class-prop-def-type"></div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <h3 class="yap">Methods</h3>
    <section class="yap func">
      <h2 class="yap func-title" id="edgeinfo-init">
        <a aria-hidden="true" href="#edgeinfo-init" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>_EdgeInfo.__init__
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>_EdgeInfo()</span>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Initialises a network information structure.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="edgeinfo-gather-edge-info">
        <a aria-hidden="true" href="#edgeinfo-gather-edge-info" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>_EdgeInfo.gather_edge_info
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>gather_edge_info(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">edge_data)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Gather edge data from provided edge_data.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="edgeinfo-set-edge-info">
        <a aria-hidden="true" href="#edgeinfo-set-edge-info" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>_EdgeInfo.set_edge_info
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>set_edge_info(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">nx_multigraph, </div>
            <div class="yap func-sig-param">start_node_key, </div>
            <div class="yap func-sig-param">end_node_key, </div>
            <div class="yap func-sig-param">edge_idx)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Set accumulated edge data to specified graph and edge.
</Markdown></div>
    </section>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-remove-filler-nodes">
      <a aria-hidden="true" href="#nx-remove-filler-nodes" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_remove_filler_nodes
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_remove_filler_nodes(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Remove nodes of degree=2. Nodes of degree=2 represent no route-choice options other than traversal to the next edge. These are frequently found on network topologies as a means of describing roadway geometry, but are meaningless from a network topology point of view. This method will find and deleted these nodes, and replaces the two edges on either side with a new spliced edge. The new edge's `geom` attribute will retain the geometric properties of the original edges.

:::note
Filler nodes may be prevalent in poor quality datasets, or in situations where curved roadways have been represented
through the addition of nodes to describe arced geometries. `cityseer` uses `shapely` `Linestrings` to describe
arbitrary road geometries without the need for filler nodes. Filler nodes can therefore be removed, thus reducing
side-effects as a function of varied node intensities when computing network centralities.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with nodes of degree=2 removed. Adjacent edges will be combined into a unified new edge with associated `geom` attributes spliced together.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-consolidate-nodes">
      <a aria-hidden="true" href="#nx-consolidate-nodes" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_consolidate_nodes
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_consolidate_nodes(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">buffer_dist=5, </div>
          <div class="yap func-sig-param">min_node_group=2, </div>
          <div class="yap func-sig-param">min_node_degree=1, </div>
          <div class="yap func-sig-param">min_cumulative_degree, </div>
          <div class="yap func-sig-param">max_cumulative_degree, </div>
          <div class="yap func-sig-param">neighbour_policy, </div>
          <div class="yap func-sig-param">crawl=True, </div>
          <div class="yap func-sig-param">cent_min_degree=3, </div>
          <div class="yap func-sig-param">cent_min_names, </div>
          <div class="yap func-sig-param">cent_min_len_factor, </div>
          <div class="yap func-sig-param">merge_edges_by_midline=True, </div>
          <div class="yap func-sig-param">multi_edge_len_factor=1.25, </div>
          <div class="yap func-sig-param">multi_edge_min_len=100)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Consolidates nodes if they are within a buffer distance of each other. Several parameters provide more control over the conditions used for deciding whether or not to merge nodes. The algorithm proceeds in two steps:

 Nodes within the buffer distance of each other are merged. A new centroid will be determined and all existing edge endpoints will be updated accordingly. The new centroid for the merged nodes can be based on:
- The centroid of the node group;
- Else, all nodes of degree greater or equal to `cent_min_degree`;
- Else, all nodes with aggregate adjacent edge lengths greater than a factor of `cent_min_len_factor` of the node with the greatest aggregate length for adjacent edges.

 The merging of nodes creates parallel edges which may start and end at a shared node on either side. These edges are replaced by a single new edge, with the new geometry selected from either:
- An imaginary centreline of the combined edges if `merge_edges_by_midline` is set to `True`;
- Else, the shortest edge, with longer edges discarded;
- Note that substantially longer parallel edges are retained, instead of discarded, if they exceed `multi_edge_len_factor` and are longer than `multi_edge_min_len`.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">buffer_dist</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to be used for consolidating nearby nodes. Defaults to 5.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">min_node_group</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The minimum number of nodes to consider a valid group for consolidation. Defaults to 2.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">min_node_degree</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The least number of edges a node should have in order to be considered for consolidation. Defaults to 1.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">min_cumulative_degree</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional minimum cumulative degree to consider a valid node group for consolidation. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_cumulative_degree</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional maximum cumulative degree to consider a valid node group for consolidation. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">neighbour_policy</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether all nodes within the buffer distance are merged, or only &quot;direct&quot; or &quot;indirect&quot; neighbours. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">crawl</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether the algorithm will recursively explore neighbours of neighbours if those neighbours are within the buffer distance from the prior node. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">cent_min_degree</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The minimum node degree for a node to be considered when calculating the new centroid for the merged node cluster. Defaults to 3.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">cent_min_names</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The minimum number of cumulative street names or street references to be considered when calculating the new centroid. Requires `names` and `refs` edge attributes containing lists of OSM street names or refs. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">cent_min_len_factor</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The minimum aggregate adjacent edge lengths an existing node should have to be considered when calculating the centroid for the new node cluster. Expressed as a factor of the node with the greatest aggregate adjacent edge lengths. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">merge_edges_by_midline</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to merge parallel edges by an imaginary centreline. If set to False, then the shortest edge will be retained as the new geometry and the longer edges will be discarded. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">multi_edge_len_factor</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
In cases where one line is significantly longer than another (e.g. crescent streets) then the longer edge is retained as separate if exceeding the multi_edge_len_factor as a factor of the shortest length but with the exception that (longer) edges still shorter than multi_edge_min_len are removed regardless. Defaults to 1.5.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">multi_edge_min_len</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
See `multi_edge_len_factor`. Defaults to 100.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with consolidated nodes.
</Markdown></div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap">Notes</h3><Markdown is:raw>
See the guide on [graph cleaning](/guide#graph-cleaning) for more information.

![Example raw graph from OSM](/images/graph_cleaning_1.png) _The pre-consolidation OSM street network for Soho, London. © OpenStreetMap contributors._

![Example cleaned graph](/images/graph_cleaning_5.png) _The consolidated OSM street network for Soho, London. © OpenStreetMap contributors._
</Markdown>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-split-opposing-geoms">
      <a aria-hidden="true" href="#nx-split-opposing-geoms" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_split_opposing_geoms
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_split_opposing_geoms(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">buffer_dist=10, </div>
          <div class="yap func-sig-param">merge_edges_by_midline=True, </div>
          <div class="yap func-sig-param">multi_edge_len_factor=1.25, </div>
          <div class="yap func-sig-param">multi_edge_min_len=100)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Split edges opposite nodes on parallel edge segments if within a buffer distance. This facilitates merging parallel roadways through subsequent use of [`nx-consolidate-nodes`](#nx-consolidate-nodes).
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">buffer_dist</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance to be used for splitting nearby nodes. Defaults to 5.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">merge_edges_by_midline</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to merge parallel edges by an imaginary centreline. If set to False, then the shortest edge will be retained as the new geometry and the longer edges will be discarded. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">multi_edge_len_factor</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
In cases where one line is significantly longer than another (e.g. crescent streets) then the longer edge is retained as separate if exceeding the `multi_edge_len_factor` as a factor of the shortest length but with the exception that (longer) edges still shorter than `multi_edge_min_len` are removed regardless. Defaults to 1.5.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">multi_edge_min_len</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
See `multi_edge_len_factor`. Defaults to 100.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with consolidated nodes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-iron-edge-ends">
      <a aria-hidden="true" href="#nx-iron-edge-ends" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_iron_edge_ends
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_iron_edge_ends(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">flatten_tail_length=25)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Flattens edges where angular deviation is less than max_angle. Useful for post-processing step after graph cleaning.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">flatten_tail_length</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The length within which to flatten segment ends.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph`.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-decompose">
      <a aria-hidden="true" href="#nx-decompose" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_decompose
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_decompose(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">decompose_max)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Decomposes a graph so that no edge is longer than a set maximum. Decomposition provides a more granular representation of potential variations along street lengths, while reducing network centrality side-effects that arise as a consequence of varied node densities.

:::note
Setting the `decompose` parameter too small in relation to the size of the graph may increase the computation time
unnecessarily for subsequent analysis. For larger-scale urban analysis, it is generally not necessary to go smaller
20m, and 50m may already be sufficient for the majority of cases.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">decompose_max</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The maximum length threshold for decomposed edges.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A decomposed `networkX` graph with no edge longer than the `decompose_max` parameter. If `live` node attributes were provided, then the `live` attribute for child-nodes will be set to `True` if either or both parent nodes were `live`. Otherwise, all nodes wil be set to `live=True`. The `length` and `imp_factor` edge attributes will be set to match the lengths of the new edges.
</Markdown></div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap">Notes</h3><Markdown is:raw>
```python
from cityseer.tools import mock, graphs, plot

G = mock.mock_graph()
G_simple = graphs.nx_simple_geoms(G)
G_decomposed = graphs.nx_decompose(G_simple, 100)
plot.plot_nx(G_decomposed)
```


![Example graph](/images/graph_simple.png) _Example graph prior to decomposition._

![Example decomposed graph](/images/graph_decomposed.png) _Example graph after decomposition._
</Markdown>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-to-dual">
      <a aria-hidden="true" href="#nx-to-dual" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_to_dual
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_to_dual(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convert a primal graph representation to the dual representation. Primal graphs represent intersections as nodes and streets as edges. This method will invert this representation so that edges are converted to nodes and intersections become edges. Primal edge `geom` attributes will be welded to adjacent edges and split into the new dual edge `geom` attributes.

:::note
Note that a `MultiGraph` is useful for primal but not for dual, so the output `MultiGraph` will have single edges.
e.g. a crescent street that spans the same intersections as parallel straight street requires multiple edges in
primal. The same type of situation does not arise in the dual because the nodes map to distinct edges regardless.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A dual representation `networkX` graph. The new dual nodes will have `x` and `y` node attributes corresponding to the mid-points of the original primal edges. If `live` node attributes were provided, then the `live` attribute for the new dual nodes will be set to `True` if either or both of the adjacent primal nodes were set to `live=True`. Otherwise, all dual nodes wil be set to `live=True`. The primal `geom` edge attributes will be split and welded to form the new dual `geom` edge attributes. A `parent_primal_node` edge attribute will be added, corresponding to the node identifier of the primal graph.
</Markdown></div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap">Notes</h3><Markdown is:raw>
```python
from cityseer.tools import graphs, mock, plot

G = mock.mock_graph()
G_simple = graphs.nx_simple_geoms(G)
G_dual = graphs.nx_to_dual(G_simple)
plot.plot_nx_primal_or_dual(G_simple,
                            G_dual,
                            plot_geoms=False)
```


![Example dual graph](/images/graph_dual.png) _Dual graph (blue) overlaid on the source primal graph (red)._
</Markdown>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="network-structure-from-nx">
      <a aria-hidden="true" href="#network-structure-from-nx" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>network_structure_from_nx
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>network_structure_from_nx(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">crs)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Transpose a `networkX` `MultiGraph` into a `GeoDataFrame` and `NetworkStructure` for use by `cityseer`. Calculates length and angle attributes, as well as in and out bearings, and stores this information in the returned data maps.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">crs</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
CRS for initialising the returned structures. This is used for initialising the GeoPandas [`GeoDataFrame`](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.html#geopandas-geodataframe).  # pylint: disable=line-too-long
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nodes_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with `live` and `geometry` attributes. The original `networkX` graph's node keys will be used for the `GeoDataFrame` index.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">network_structure</div>
          <div class="yap doc-str-elem-type">structures.NetworkStructure</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A [`structures.NetworkStructure`](/structures#networkstructure) instance.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-network-structure">
      <a aria-hidden="true" href="#nx-from-network-structure" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_network_structure
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_network_structure(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nodes_gdf, </div>
          <div class="yap func-sig-param">network_structure, </div>
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Write `cityseer` data graph maps back to a `networkX` `MultiGraph`. This method will write back to an existing `MultiGraph` if an existing graph is provided as an argument to the `nx_multigraph` parameter.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nodes_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with `live` and Point `geometry` attributes. The index will be used for the returned `networkX` graph's node keys.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">network_structure</div>
          <div class="yap doc-str-elem-type">structures.NetworkStructure</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A [`structures.NetworkStructure`](/structures#networkstructure) instance corresponding to the `nodes_gdf` parameter.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional `networkX` graph to use as a backbone for unpacking the data. The number of nodes and edges should correspond to the `cityseer` data maps and the node identifiers should correspond to the `node_keys`. If not provided, then a new `networkX` graph will be returned. This function is intended to be used for situations where `cityseer` data is being transposed back to a source `networkX` graph. Defaults to None.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` graph. If a backbone graph was provided, a copy of the same graph will be returned. If no graph was provided, then a new graph will be generated. `x`, `y`, `live` node attributes will be copied from `nodes_gdf` to the graph nodes. `length`, `angle_sum`, `imp_factor`, `in_bearing`, and `out_bearing` attributes will be copied from the `network_structure` to the graph edges. `cc_metric` columns will be copied from the `nodes_gdf` `GeoDataFrame` to the corresponding nodes in the returned `MultiGraph`.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="nx-from-osm-nx">
      <a aria-hidden="true" href="#nx-from-osm-nx" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>nx_from_osm_nx
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>nx_from_osm_nx(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multidigraph, </div>
          <div class="yap func-sig-param">node_attributes, </div>
          <div class="yap func-sig-param">edge_attributes, </div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Copy an [`OSMnx`](https://osmnx.readthedocs.io/) directed `MultiDiGraph` to an undirected `cityseer` `MultiGraph`. See the [`OSMnx`](/guide#osm-and-networkx) section of the guide for a more general discussion (and example) on workflows combining `OSMnx` with `cityseer`.

 `x` and `y` node attributes will be copied directly and `geometry` edge attributes will be copied to a `geom` edge attribute. The conversion process will snap the `shapely` `LineString` endpoints to the corresponding start and end node coordinates.

 Note that `OSMnx` `geometry` attributes only exist for simplified edges: if a `geometry` edge attribute is not found, then a simple (straight) `shapely` `LineString` geometry will be inferred from the respective start and end nodes.

 Other attributes will be ignored to avoid potential downstream misinterpretations of the attributes as a consequence of subsequent steps of graph manipulation, i.e. to avoid situations where attributes may fall out of lock-step with the state of the graph. If particular attributes need to be copied across, and assuming cognisance of downstream implications, then these can be manually specified by providing a list of node attributes keys per the `node_attributes` parameter or edge attribute keys per the `edge_attributes` parameter.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multidigraph</div>
          <div class="yap doc-str-elem-type">MultiDiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `OSMnx` derived `networkX` `MultiDiGraph` containing `x` and `y` node attributes, with optional `geometry` edge attributes containing `LineString` geoms (for simplified edges).
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_attributes</div>
          <div class="yap doc-str-elem-type">tuple[str]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Optional node attributes to copy to the new MultiGraph. (In addition to the default `x` and `y` attributes.)
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_attributes</div>
          <div class="yap doc-str-elem-type">tuple[str]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Optional edge attributes to copy to the new MultiGraph. (In addition to the optional `geometry` attribute.)
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">tolerance</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Tolerance at which to raise errors for mismatched geometry end-points vis-a-vis corresponding node coordinates. Prior to conversion, this method will check edge geometry end-points for alignment with the corresponding end-point nodes. Where these don't align within the given tolerance an exception will be raised. Otherwise, if within the tolerance, the conversion function will snap the geometry end-points to the corresponding node coordinates so that downstream exceptions are not subsequently raised. It is preferable to minimise graph manipulation prior to conversion to a `cityseer` compatible `MultiGraph` otherwise particularly large tolerances may be required, and this may lead to some unexpected or undesirable effects due to aggressive snapping.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `cityseer` compatible `networkX` graph with `x` and `y` node attributes and `geom` edge attribute.
</Markdown></div>
      </div>
    </div>
  </section>
</div>
</PageLayout>

