---
import { Markdown } from 'astro/components'
import ArXivLink from '@src/components/ArXivLink.vue'
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-osm">
    <a aria-hidden="true" href="#cityseer-tools-osm" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.osm
  </h1><Markdown is:raw>
Functions for fetching and cleaning OSM data.
</Markdown>
  <section class="yap func">
    <h2 class="yap func-title" id="buffered-point-poly">
      <a aria-hidden="true" href="#buffered-point-poly" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>buffered_point_poly
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>buffered_point_poly(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">lng, </div>
          <div class="yap func-sig-param">lat, </div>
          <div class="yap func-sig-param">buffer)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Buffer a point and return a `shapely` Polygon in WGS and UTM coordinates. This function can be used to prepare a `poly_wgs` `Polygon` for passing to [`osm_graph_from_poly_wgs()`](#osm_graph_from_poly_wgs).
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">lng</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The longitudinal WGS coordinate in degrees.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">lat</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The latitudinal WGS coordinate in degrees.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">buffer</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The buffer distance in metres.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_wgs</div>
          <div class="yap doc-str-elem-type">Polygon</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `shapely` `Polygon` in WGS coordinates.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_utm</div>
          <div class="yap doc-str-elem-type">Polygon</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `shapely` `Polygon` in UTM coordinates.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">utm_zone_number</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The UTM zone number used for conversion.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">utm_zone_letter</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The UTM zone letter used for conversion.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="fetch-osm-network">
      <a aria-hidden="true" href="#fetch-osm-network" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>fetch_osm_network
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>fetch_osm_network(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">osm_request, </div>
          <div class="yap func-sig-param">timeout=30, </div>
          <div class="yap func-sig-param">max_tries=3)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Fetches an OSM response.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">osm_request</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A valid OSM request as a string. Use [OSM Overpass](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) for testing custom queries.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">timeout</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Timeout duration for API call in seconds.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_tries</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of attempts to fetch a response before raising, by default 3
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">requests.Response</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An OSM API response.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="osm-graph-from-poly-wgs">
      <a aria-hidden="true" href="#osm-graph-from-poly-wgs" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>osm_graph_from_poly_wgs
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>osm_graph_from_poly_wgs(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">poly_wgs, </div>
          <div class="yap func-sig-param">custom_request, </div>
          <div class="yap func-sig-param">simplify=True, </div>
          <div class="yap func-sig-param">remove_parallel=True, </div>
          <div class="yap func-sig-param">iron_edges=True)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Prepares a `networkX` `MultiGraph` from an OSM request for a buffered region around a given `lng` and `lat` parameter.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly_wgs</div>
          <div class="yap doc-str-elem-type">shapely.Polygon</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A shapely Polygon representing the extents for which to fetch the OSM network. Must be in WGS (EPSG 4326) coordinates.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">custom_request</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional custom OSM request. None by default. If provided, this must include a &quot;geom_osm&quot; string formatting key for inserting the geometry passed to the OSM API query. See the discussion below.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">simplify</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to automatically simplify the OSM graph. True by default. Set to False for manual cleaning.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">remove_parallel</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to remove parallel roadway segments. True by default. Only has an effect if `simplify` is `True`.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">iron_edges</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to straighten the ends of street segments. This can help to reduce the number of artefacts from segment kinks from merging `LineStrings`. Only has an effect if `simplify` is `True`.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` with `x` and `y` node attributes that have been converted to UTM. The network will be simplified if the `simplify` parameter is `True`.
</Markdown></div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap">Notes</h3><Markdown is:raw>
The default OSM request will attempt to find all walkable routes. It will ignore motorways and will try to work with pedestrianised routes and walkways.

 If you wish to provide your own OSM request, then provide a valid OSM API request as a string. The string must contain a `{geom_osm}` string formatting key. This allows for the geometry parameter passed to the OSM API to be injected into the request. It is also recommended to not use the `skel` output option so that `cityseer` can use street name and highway reference information for cleaning purposes. See [OSM Overpass](https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL) for experimenting with custom queries.

 For example, to return only drivable roads, then use a request similar to the following. Notice the `{geom_osm}` formatting key and the use of `out qt;` instead of `out skel qt;`.

```python
custom_request = f'''
[out:json][timeout:{timeout}];
(
way[&quot;highway&quot;]
[&quot;area&quot;!=&quot;yes&quot;]
[&quot;highway&quot;!~&quot;footway|pedestrian|steps|bus_guideway|escape|raceway|proposed|planned|abandoned|platform|construction&quot;]
(poly:&quot;{geom_osm}&quot;);
);
out body;
&gt;;
out qt;
'''
```

</Markdown>
      </div>
    </div>
  </section>
</div>
</PageLayout>

