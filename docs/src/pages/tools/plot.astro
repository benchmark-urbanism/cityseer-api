---
import { Markdown } from 'astro/components';
import ArXivLink from '@src/components/ArXivLink.vue'
import PageLayout from '@src/layouts/PageLayout.astro'
---

<PageLayout>
<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-plot">
    <a aria-hidden="true" href="#cityseer-tools-plot" tab_index="-1">
      <svg ariaHidden="true" class="heading-icon" height="15px" viewbox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.plot
  </h1>
  <div class="yap doc-str-content">Convenience methods for plotting graphs within the cityseer API context. This module is predominately used for basic plots or visual verification of behaviour in code tests. Custom behaviour can be achieved by directly manipulating the underlying [`NetworkX`](https://networkx.github.io) and [`matplotlib`](https://matplotlib.org) figures.</div>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-nx-primal-or-dual">
      <a aria-hidden="true" href="#plot-nx-primal-or-dual" tab_index="-1">
        <svg ariaHidden="true" class="heading-icon" height="15px" viewbox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_nX_primal_or_dual
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_nX_primal_or_dual(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">primal_graph, </div>
          <div class="yap func-sig-param">dual_graph, </div>
          <div class="yap func-sig-param">path, </div>
          <div class="yap func-sig-param">labels=False, </div>
          <div class="yap func-sig-param">primal_node_size=30, </div>
          <div class="yap func-sig-param">primal_node_colour, </div>
          <div class="yap func-sig-param">primal_edge_colour, </div>
          <div class="yap func-sig-param">dual_node_size=30, </div>
          <div class="yap func-sig-param">dual_node_colour, </div>
          <div class="yap func-sig-param">dual_edge_colour, </div>
          <div class="yap func-sig-param">primal_edge_width, </div>
          <div class="yap func-sig-param">dual_edge_width, </div>
          <div class="yap func-sig-param">plot_geoms=True, </div>
          <div class="yap func-sig-param">x_lim, </div>
          <div class="yap func-sig-param">y_lim, </div>
          <div class="yap func-sig-param">ax, </div>
          <div class="yap func-sig-param">**kwargs</div>
        </div>
        <span>)</span>
      </div>
    </div>
    <div class="yap doc-str-content">
      <h3 class="yap doc-str-heading">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_graph</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional `NetworkX` MultiGraph to plot in the primal representation. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_graph</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional `NetworkX` MultiGraph to plot in the dual representation. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">path</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional filepath: if provided, the image will be saved to the path instead of being displayed. Defaults to
None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">labels</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Whether to display node labels. Defaults to False.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_node_size</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">The diameter for the primal graph's nodes.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_node_colour</div>
          <div class="yap doc-str-elem-type">str | tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Primal node colour or colours. When passing an iterable of colours, the number of colours should match the order
and number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx)
method and should be formatted accordingly. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_edge_colour</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Primal edge colour as a `matplotlib` compatible colour string. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_node_size</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">The diameter for the dual graph's nodes.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_node_colour</div>
          <div class="yap doc-str-elem-type">str | tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Dual node colour or colours. When passing a list of colours, the number of colours should match the order and
number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx)
method and should be formatted accordingly. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_edge_colour</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Dual edge colour as a `matplotlib` compatible colour string. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_edge_width</div>
          <div class="yap doc-str-elem-type">int | float</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Linewidths for the primal edge. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_edge_width</div>
          <div class="yap doc-str-elem-type">int | float</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Linewidths for the dual edge. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">plot_geoms</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Whether to plot the edge geometries. If set to `False`, straight lines will be drawn from node-to-node to
represent edges. Defaults to True.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_lim</div>
          <div class="yap doc-str-elem-type">tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A tuple or list with the minimum and maxium `x` extents to be plotted.
Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">y_lim</div>
          <div class="yap doc-str-elem-type">tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A tuple or list with the minimum and maxium `y` extents to be plotted.
Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ax</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional `matplotlib` `ax` to which to plot. If not provided, a figure and ax will be generated.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">**kwargs</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">`kwargs` which will be passed to the `matplotlib` figure parameters. If
provided, these will override the default figure size or dpi parameters.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap doc-str-heading">Notes</h3>
        <Markdown class="doc-str-content">Plot either or both primal and dual representations of a `networkX MultiGraph`. Only call this function directly if
explicitly printing both primal and dual graphs. Otherwise, use the simplified [`plot_nX`](/tools/plot/#plot_nx) method
instead.

```py
from cityseer.tools import mock, graphs, plot
G = mock.mock_graph()
G_simple = graphs.nX_simple_geoms(G)
G_dual = graphs.nX_to_dual(G_simple)
plot.plot_nX_primal_or_dual(G_simple,
                            G_dual,
                            plot_geoms=False)
```
![Example primal and dual graph plot.](../../src/assets/plots/images/graph_dual.png)
_A dual graph in blue overlaid on the source primal graph in red._</Markdown>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-nx">
      <a aria-hidden="true" href="#plot-nx" tab_index="-1">
        <svg ariaHidden="true" class="heading-icon" height="15px" viewbox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_nX
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_nX(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">networkX_graph, </div>
          <div class="yap func-sig-param">path, </div>
          <div class="yap func-sig-param">labels=False, </div>
          <div class="yap func-sig-param">node_size=20, </div>
          <div class="yap func-sig-param">node_colour, </div>
          <div class="yap func-sig-param">edge_colour, </div>
          <div class="yap func-sig-param">edge_width, </div>
          <div class="yap func-sig-param">plot_geoms=False, </div>
          <div class="yap func-sig-param">x_lim, </div>
          <div class="yap func-sig-param">y_lim, </div>
          <div class="yap func-sig-param">ax, </div>
          <div class="yap func-sig-param">**kwargs</div>
        </div>
        <span>)</span>
      </div>
    </div>
    <div class="yap doc-str-content">
      <Markdown class="doc-str-content">Plot a `networkX` MultiGraph.</Markdown>
      <h3 class="yap doc-str-heading">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">networkX_graph</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A `NetworkX` MultiGraph.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">path</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional filepath: if provided, the image will be saved to the path instead of being displayed. Defaults to
None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">labels</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Whether to display node labels. Defaults to False.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_size</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">The diameter for the graph's nodes.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_colour</div>
          <div class="yap doc-str-elem-type">str | tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Node colour or colours. When passing an iterable of colours, the number of colours should match the order and
number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx)
method and should be formatted accordingly. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_colour</div>
          <div class="yap doc-str-elem-type">str | tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Edges colour as a `matplotlib` compatible colour string. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_width</div>
          <div class="yap doc-str-elem-type">int | float</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Linewidths for edges. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">plot_geoms</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Whether to plot the edge geometries. If set to `False`, straight lines will be drawn from node-to-node to
represent edges. Defaults to True.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_lim</div>
          <div class="yap doc-str-elem-type">tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A tuple or list with the minimum and maxium `x` extents to be plotted. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">y_lim</div>
          <div class="yap doc-str-elem-type">tuple | list</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A tuple or list with the minimum and maxium `y` extents to be plotted. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ax</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional `matplotlib` `ax` to which to plot. If not provided, a figure and ax will be generated.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">**kwargs</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">`kwargs` which will be passed to the `matplotlib` figure parameters. If provided, these will override the
default figure size or dpi parameters.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap doc-str-heading">Notes</h3>
        <Markdown class="doc-str-content">```py
from cityseer.tools import mock, graphs, plot
from cityseer.metrics import networks
from matplotlib import colors
# generate a MultiGraph and compute gravity
G = mock.mock_graph()
G = graphs.nX_simple_geoms(G)
G = graphs.nX_decompose(G, 50)
N = networks.NetworkLayerFromNX(G, distances=[800])
N.node_centrality(measures=['node_beta'])
G_after = N.to_networkX()
# let's extract and normalise the values
vals = []
for node, data in G_after.nodes(data=True):
    vals.append(data['metrics']['centrality']['node_beta'][800])
# let's create a custom colourmap using matplotlib
cmap = colors.LinearSegmentedColormap.from_list('cityseer',
                                                [(100/255, 193/255, 255/255, 255/255),
                                                (211/255, 47/255, 47/255, 1/255)])
# normalise the values
vals = colors.Normalize()(vals)
# cast against the colour map
cols = cmap(vals)
# plot
plot.plot_nX(G_after, node_colour=cols)
```

![Example Colour Plot.](../../src/assets/plots/images/graph_colour.png)
_Colour plot of 800m gravity index centrality on a 50m decomposed graph._</Markdown>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-assignment">
      <a aria-hidden="true" href="#plot-assignment" tab_index="-1">
        <svg ariaHidden="true" class="heading-icon" height="15px" viewbox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_assignment
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_assignment(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">Network_Layer, </div>
          <div class="yap func-sig-param">Data_Layer, </div>
          <div class="yap func-sig-param">path, </div>
          <div class="yap func-sig-param">node_colour, </div>
          <div class="yap func-sig-param">node_labels=False, </div>
          <div class="yap func-sig-param">data_labels, </div>
          <div class="yap func-sig-param">**kwargs</div>
        </div>
        <span>)</span>
      </div>
    </div>
    <div class="yap doc-str-content">
      <Markdown class="doc-str-content">Plot a `NetworkLayer` and `DataLayer` for the purpose of visualising assignment of data points to respective nodes.</Markdown>
      <h3 class="yap doc-str-heading">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">Network_Layer</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A [`NetworkLayer`](/metrics/networks/#class-networklayer).</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">Data_Layer</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">A [`DataLayer`](/metrics/layers/#class-datalayer).</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">path</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional filepath: if provided, the image will be saved to the path instead of being displayed. Defaults to
None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_colour</div>
          <div class="yap doc-str-elem-type">list | tuple</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Node colour or colours. When passing a list of colours, the number of colours should match the order and number
of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx)
method and should be formatted accordingly. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_labels</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">Whether to plot the node labels. Defaults to False.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">data_labels</div>
          <div class="yap doc-str-elem-type">list | tuple</div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional iterable of categorical data labels which will be mapped to colours. The number of labels should
match the number of data points in `DataLayer`. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">**kwargs</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">`kwargs` which will be passed to the `matplotlib` figure parameters. If provided, these will override the
default figure size or dpi parameters.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-meta">
        <h3 class="yap doc-str-heading">Notes</h3>
        <Markdown class="doc-str-content">![Example assignment plot.](../../src/assets/plots/images/assignment_plot.png)
_An assignment plot to a 50m decomposed graph, with the data points coloured by categorical labels._</Markdown>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-graph-maps">
      <a aria-hidden="true" href="#plot-graph-maps" tab_index="-1">
        <svg ariaHidden="true" class="heading-icon" height="15px" viewbox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_graph_maps
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_graph_maps(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">node_data, </div>
          <div class="yap func-sig-param">edge_data, </div>
          <div class="yap func-sig-param">data_map, </div>
          <div class="yap func-sig-param">poly</div>
        </div>
        <span>)</span>
      </div>
    </div>
    <div class="yap doc-str-content">
      <Markdown class="doc-str-content">Plot a graph from raw `cityseer` data structures. Note that this function is subject to frequent revision pendingshort-term development requirements. It is used mainly to visually confirm the correct behaviour of particular
algorithms during the software development cycle.</Markdown>
      <h3 class="yap doc-str-heading">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_data</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">`cityseer` node map.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_data</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">`cityseer` edge map.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">data_map</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional data map. Defaults to None.</Markdown>
        </div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly</div>
          <div class="yap doc-str-elem-type"></div>
        </div>
        <div class="yap doc-str-elem-desc">
          <Markdown class="doc-str-content">An optional polygon. Defaults to None.</Markdown>
        </div>
      </div>
    </div>
  </section>
</div>
</PageLayout>

