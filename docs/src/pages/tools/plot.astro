---
import Markdown from '@astrojs/markdown-component';
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-plot">
    <a aria-hidden="true" href="#cityseer-tools-plot" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.plot
  </h1><Markdown is:raw>
Convenience methods for plotting graphs within the cityseer API context.

 Custom behaviour can be achieved by directly manipulating the underlying [`NetworkX`](https://networkx.github.io) and [`matplotlib`](https://matplotlib.org) figures. This module is predominately used for basic plots or visual verification of behaviour in code tests. Users are encouraged to use matplotlib or other plotting packages directly where possible. See the demos section for examples.
</Markdown>
  <section class="yap class">
    <h2 class="yap class-title" id="colourmap">
      <a aria-hidden="true" href="#colourmap" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>ColourMap
    </h2><Markdown is:raw>
Specifies global colour presets.
</Markdown>
    <h3 class="yap">Properties</h3>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">primary</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">accent</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">info</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">secondary</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">warning</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">error</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">background</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-nx-primal-or-dual">
      <a aria-hidden="true" href="#plot-nx-primal-or-dual" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_nx_primal_or_dual
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_nx_primal_or_dual(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">primal_graph=None, </div>
          <div class="yap func-sig-param">dual_graph=None, </div>
          <div class="yap func-sig-param">path=None, </div>
          <div class="yap func-sig-param">labels=False, </div>
          <div class="yap func-sig-param">primal_node_size=30, </div>
          <div class="yap func-sig-param">primal_node_colour=None, </div>
          <div class="yap func-sig-param">primal_edge_colour=None, </div>
          <div class="yap func-sig-param">dual_node_size=30, </div>
          <div class="yap func-sig-param">dual_node_colour=None, </div>
          <div class="yap func-sig-param">dual_edge_colour=None, </div>
          <div class="yap func-sig-param">primal_edge_width=None, </div>
          <div class="yap func-sig-param">dual_edge_width=None, </div>
          <div class="yap func-sig-param">plot_geoms=True, </div>
          <div class="yap func-sig-param">x_lim=None, </div>
          <div class="yap func-sig-param">y_lim=None, </div>
          <div class="yap func-sig-param">ax=None, </div>
          <div class="yap func-sig-param">kwargs={})</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Plot a primal or dual cityseer graph.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_graph</div>
          <div class="yap doc-str-elem-type">MultiGraph | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional `NetworkX` MultiGraph to plot in the primal representation. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_graph</div>
          <div class="yap doc-str-elem-type">MultiGraph | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional `NetworkX` MultiGraph to plot in the dual representation. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">path</div>
          <div class="yap doc-str-elem-type">str | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional filepath: if provided, the image will be saved to the path instead of being displayed. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">labels</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to display node labels. Defaults to False.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_node_size</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The diameter for the primal graph's nodes.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_node_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Primal node colour or colours. When passing an iterable of colours, the number of colours should match the order and number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx) method and should be formatted accordingly. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_edge_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Primal edge colour or colours. When passing an iterable of colours, the number of colours should match the order and number of edges in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx) method and should be formatted accordingly. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_node_size</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The diameter for the dual graph's nodes.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_node_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Dual node colour or colours. When passing a list of colours, the number of colours should match the order and number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx) method and should be formatted accordingly. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_edge_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Dual edge colour or colours. When passing an iterable of colours, the number of colours should match the order and number of edges in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx) method and should be formatted accordingly. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">primal_edge_width</div>
          <div class="yap doc-str-elem-type">int | float | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Linewidths for the primal edge. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">dual_edge_width</div>
          <div class="yap doc-str-elem-type">int | float | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Linewidths for the dual edge. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">plot_geoms</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to plot the edge geometries. If set to `False`, straight lines will be drawn from node-to-node to represent edges. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_lim</div>
          <div class="yap doc-str-elem-type">tuple[float, float] | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple or list with the minimum and maxium `x` extents to be plotted. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">y_lim</div>
          <div class="yap doc-str-elem-type">tuple[float, float] | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple or list with the minimum and maxium `y` extents to be plotted. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ax</div>
          <div class="yap doc-str-elem-type">Axes | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional `matplotlib` `ax` to which to plot. If not provided, a figure and ax will be generated.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">kwargs</div>
          <div class="yap doc-str-elem-type">Any]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
`kwargs` which will be passed to the `matplotlib` figure parameters. If provided, these will override the default figure size or dpi parameters.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
Plot either or both primal and dual representations of a `networkX MultiGraph`. Only call this function directly if explicitly printing both primal and dual graphs. Otherwise, use the simplified [`plot_nx`](/tools/plot#plot-nx) method instead.

```py
from cityseer.tools import mock, graphs, plot
G = mock.mock_graph()
G_simple = graphs.nx_simple_geoms(G)
G_dual = graphs.nx_to_dual(G_simple)
plot.plot_nx_primal_or_dual(G_simple,
                            G_dual,
                            plot_geoms=False)
```

![Example primal and dual graph plot.](/images/graph_dual.png) _A dual graph in blue overlaid on the source primal graph in red._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-nx">
      <a aria-hidden="true" href="#plot-nx" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_nx
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_nx(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">path=None, </div>
          <div class="yap func-sig-param">labels=False, </div>
          <div class="yap func-sig-param">node_size=20, </div>
          <div class="yap func-sig-param">node_colour=None, </div>
          <div class="yap func-sig-param">edge_colour=None, </div>
          <div class="yap func-sig-param">edge_width=None, </div>
          <div class="yap func-sig-param">plot_geoms=False, </div>
          <div class="yap func-sig-param">x_lim=None, </div>
          <div class="yap func-sig-param">y_lim=None, </div>
          <div class="yap func-sig-param">ax=None, </div>
          <div class="yap func-sig-param">kwargs={})</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Plot a `networkX` MultiGraph.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` MultiGraph.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">path</div>
          <div class="yap doc-str-elem-type">str | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional filepath: if provided, the image will be saved to the path instead of being displayed. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">labels</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to display node labels. Defaults to False.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_size</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The diameter for the graph's nodes.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Node colour or colours. When passing an iterable of colours, the number of colours should match the order and number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx) method and should be formatted accordingly. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Edges colour as a `matplotlib` compatible colour string. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_width</div>
          <div class="yap doc-str-elem-type">int | float | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Linewidths for edges. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">plot_geoms</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to plot the edge geometries. If set to `False`, straight lines will be drawn from node-to-node to represent edges. Defaults to True.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">x_lim</div>
          <div class="yap doc-str-elem-type">tuple[float, float] | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple or list with the minimum and maxium `x` extents to be plotted. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">y_lim</div>
          <div class="yap doc-str-elem-type">tuple[float, float] | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple or list with the minimum and maxium `y` extents to be plotted. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ax</div>
          <div class="yap doc-str-elem-type">Axes | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional `matplotlib` `ax` to which to plot. If not provided, a figure and ax will be generated.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">kwargs</div>
          <div class="yap doc-str-elem-type">Any]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
`kwargs` which will be passed to the `matplotlib` figure parameters. If provided, these will override the default figure size or dpi parameters.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
```py
from cityseer.tools import mock, graphs, plot
from cityseer.metrics import networks
from matplotlib import colors

# generate a MultiGraph and compute gravity
G = mock.mock_graph()
G = graphs.nx_simple_geoms(G)
G = graphs.nx_decompose(G, 50)
nodes_gdf, network_structure = io.network_structure_from_nx(G, crs=3395)
networks.node_centrality(
    measures=["node_beta"], network_structure=network_structure, nodes_gdf=nodes_gdf, distances=[800]
)
G_after = graphs.nx_from_network_structure(nodes_gdf, network_structure, G)
# let's extract and normalise the values
vals = []
for node, data in G_after.nodes(data=True):
    vals.append(data["cc_metric_node_beta_800"])
# let's create a custom colourmap using matplotlib
cmap = colors.LinearSegmentedColormap.from_list(
    "cityseer", [(100 / 255, 193 / 255, 255 / 255, 255 / 255), (211 / 255, 47 / 255, 47 / 255, 1 / 255)]
)
# normalise the values
vals = colors.Normalize()(vals)
# cast against the colour map
cols = cmap(vals)
# plot
plot.plot_nx(G_after, node_colour=cols)
```


![Example Colour Plot.](/images/graph_colour.png) _Colour plot of 800m gravity index centrality on a 50m decomposed graph._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-assignment">
      <a aria-hidden="true" href="#plot-assignment" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_assignment
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_assignment(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">network_structure, </div>
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">data_gdf, </div>
          <div class="yap func-sig-param">path=None, </div>
          <div class="yap func-sig-param">node_colour=None, </div>
          <div class="yap func-sig-param">node_labels=False, </div>
          <div class="yap func-sig-param">data_labels=None, </div>
          <div class="yap func-sig-param">kwargs={})</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Plot a `network_structure` and `data_gdf` for visualising assignment of data points to respective nodes.

:::warning
This method is primarily intended for package testing and development.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">network_structure</div>
          <div class="yap doc-str-elem-type">NetworkStructure</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A [`rustalgos.NetworkStructure`](/rustalgos#networkstructure) instance.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` MultiGraph.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">data_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `data_gdf` `GeoDataFrame` with `nearest_assigned` and `next_neareset_assign` columns.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">path</div>
          <div class="yap doc-str-elem-type">str | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional filepath: if provided, the image will be saved to the path instead of being displayed. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_colour</div>
          <div class="yap doc-str-elem-type">ColourType | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Node colour or colours. When passing a list of colours, the number of colours should match the order and number of nodes in the MultiGraph. The colours are passed to the underlying [`draw_networkx`](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.drawing.nx_pylab.draw_networkx.html#draw-networkx) method and should be formatted accordingly. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">node_labels</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to plot the node labels. Defaults to False.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">data_labels</div>
          <div class="yap doc-str-elem-type">ArrayLike | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional iterable of categorical data labels which will be mapped to colours. The number of labels should match the number of data points in `data_layer`. Defaults to None.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">kwargs</div>
          <div class="yap doc-str-elem-type">Any]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
`kwargs` which will be passed to the `matplotlib` figure parameters. If provided, these will override the default figure size or dpi parameters.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
![Example assignment plot.](/images/assignment_plot.png) _An assignment plot to a 50m decomposed graph, with the data points coloured by categorical labels._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-network-structure">
      <a aria-hidden="true" href="#plot-network-structure" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_network_structure
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_network_structure(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">network_structure, </div>
          <div class="yap func-sig-param">data_gdf, </div>
          <div class="yap func-sig-param">poly=None)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Plot a graph from raw `cityseer` network structure.

:::note
Note that this function is subject to frequent revision pending short-term development requirements. It is used
mainly to visually confirm the correct behaviour of particular algorithms during the software development cycle.
:::
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">network_structure</div>
          <div class="yap doc-str-elem-type">NetworkStructure</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A [`rustalgos.NetworkStructure`](/rustalgos#networkstructure) instance.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">data_gdf</div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `data_gdf` `GeoDataFrame` with `nearest_assigned` and `next_neareset_assign` columns.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">poly</div>
          <div class="yap doc-str-elem-type">Polygon | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional polygon. Defaults to None.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-scatter">
      <a aria-hidden="true" href="#plot-scatter" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_scatter
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_scatter(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">ax, </div>
          <div class="yap func-sig-param">xs, </div>
          <div class="yap func-sig-param">ys, </div>
          <div class="yap func-sig-param">vals, </div>
          <div class="yap func-sig-param">bbox_extents, </div>
          <div class="yap func-sig-param">perc_range=(0.01, 99.99), </div>
          <div class="yap func-sig-param">cmap_key='viridis', </div>
          <div class="yap func-sig-param">shape_exp=1, </div>
          <div class="yap func-sig-param">s_min=0.1, </div>
          <div class="yap func-sig-param">s_max=1, </div>
          <div class="yap func-sig-param">rasterized=True, </div>
          <div class="yap func-sig-param">face_colour='#111')</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convenience plotting function for plotting outputs from examples in demo notebooks.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ax</div>
          <div class="yap doc-str-elem-type">Axes</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A 'matplotlib' `Ax` to which to plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">xs</div>
          <div class="yap doc-str-elem-type">ArrayLike</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A numpy array of floats representing the `x` coordinates for points to plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ys</div>
          <div class="yap doc-str-elem-type">ArrayLike</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A numpy array of floats representing the `y` coordinates for points to plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">vals</div>
          <div class="yap doc-str-elem-type">ArrayLike</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A numpy array of floats representing the data values for the provided points.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">bbox_extents</div>
          <div class="yap doc-str-elem-type">tuple[int, int, int, int] | tuple[float, float, float, float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple or list containing the `[s, w, n, e]` bounding box extents for clipping the plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">perc_range</div>
          <div class="yap doc-str-elem-type">tuple[float, float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple of two floats, representing the minimum and maximum percentiles at which to clip the data.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">cmap_key</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `matplotlib` colour map key.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">shape_exp</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A float representing an exponential for reshaping the values distribution. Defaults to 1 which returns the values as provided. An exponential greater than or less than 1 will shape the values distribution accordingly.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">s_min</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A float representing the minimum size for a plotted point.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">s_max</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A float representing the maximum size for a plotted point.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">rasterized</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether or not to rasterise the output. Recommended for plots with a large number of points.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">face_colour</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A hex or other valid `matplotlib` colour value for the ax and figure faces (backgrounds).
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="plot-nx-edges">
      <a aria-hidden="true" href="#plot-nx-edges" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>plot_nx_edges
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>plot_nx_edges(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">ax, </div>
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">edge_metrics_key, </div>
          <div class="yap func-sig-param">bbox_extents, </div>
          <div class="yap func-sig-param">perc_range=(0.01, 99.99), </div>
          <div class="yap func-sig-param">cmap_key='viridis', </div>
          <div class="yap func-sig-param">shape_exp=1, </div>
          <div class="yap func-sig-param">lw_min=0.1, </div>
          <div class="yap func-sig-param">lw_max=1, </div>
          <div class="yap func-sig-param">edge_label_key=None, </div>
          <div class="yap func-sig-param">colour_by_categorical=False, </div>
          <div class="yap func-sig-param">max_n_categorical=10, </div>
          <div class="yap func-sig-param">rasterized=True, </div>
          <div class="yap func-sig-param">face_colour='#111', </div>
          <div class="yap func-sig-param">invert_plot_order=False)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Convenience plotting function for plotting edge outputs from examples in demo notebooks.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">ax</div>
          <div class="yap doc-str-elem-type">Axes</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A 'matplotlib' `Ax` to which to plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` MultiGraph.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_metrics_key</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An edge key for the provided `nx_multigraph`. Plotted values will be retrieved from this edge key.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">bbox_extents</div>
          <div class="yap doc-str-elem-type">tuple[int, int, int, int] | tuple[float, float, float, float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple or list containing the `[s, w, n, e]` bounding box extents for clipping the plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">perc_range</div>
          <div class="yap doc-str-elem-type">tuple[float, float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A tuple of two floats, representing the minimum and maximum percentiles at which to clip the data.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">cmap_key</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `matplotlib` colour map key.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">shape_exp</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A float representing an exponential for reshaping the values distribution. Defaults to 1 which returns the values as provided. An exponential greater than or less than 1 will shape the values distribution accordingly.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">lw_min</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A float representing the minimum line width for a plotted edge.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">lw_max</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A float representing the maximum line width for a plotted edge.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">edge_label_key</div>
          <div class="yap doc-str-elem-type">str | None</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A key for retrieving categorical labels from edges.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">colour_by_categorical</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to plot colours by categorical. This requires an `edge_label_key` parameter.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_n_categorical</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of categorical values (sorted in decreasing order) to plot.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">rasterized</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether or not to rasterise the output. Recommended for plots with a large number of edges.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">face_colour</div>
          <div class="yap doc-str-elem-type">str</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A hex or other valid `matplotlib` colour value for the ax and figure faces (backgrounds).
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">invert_plot_order</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
Whether to invert the plot order, e.g. if using an inverse colour map.
</Markdown></div>
      </div>
    </div>
  </section>
</div>
</PageLayout>

