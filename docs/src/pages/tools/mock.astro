---
import Markdown from '@astrojs/markdown-component';
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-tools-mock">
    <a aria-hidden="true" href="#cityseer-tools-mock" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.tools.mock
  </h1><Markdown is:raw>
A collection of functions for the generation of mock data.

 This module is intended for project development and writing code tests, but may otherwise be useful for demonstration and utility purposes.
</Markdown>
  <section class="yap func">
    <h2 class="yap func-title" id="mock-graph">
      <a aria-hidden="true" href="#mock-graph" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>mock_graph
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>mock_graph(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">wgs84_coords=False)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a `NetworkX` `MultiGraph` for testing or experimentation purposes.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">wgs84_coords</div>
          <div class="yap doc-str-elem-type">bool</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
If set to `True`, the `x` and `y` attributes will be in [WGS84](https://epsg.io/4326) geographic coordinates instead of a projected cartesion coordinate system.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` `MultiGraph` with `x` and `y` node attributes.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
```python
from cityseer.tools import mock, plot
nx_multigraph = mock.mock_graph()
plot.plot_nx(nx_multigraph)
```


![Example graph](/images/graph_example.png) _Mock graph._
</Markdown>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="get-graph-extents">
      <a aria-hidden="true" href="#get-graph-extents" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>get_graph_extents
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>get_graph_extents(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Derive geographic bounds for a given networkX graph.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` `MultiGraph` with `x` and `y` node parameters.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">min_x</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>

</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">min_y</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>

</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_x</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>

</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">max_y</div>
          <div class="yap doc-str-elem-type">float</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>

</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="mock-data-gdf">
      <a aria-hidden="true" href="#mock-data-gdf" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>mock_data_gdf
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>mock_data_gdf(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">length=50, </div>
          <div class="yap func-sig-param">random_seed=0)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a `GeoDataFrame` containing mock data for testing or experimentation purposes.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` graph with `x` and `y` attributes. This is used in order to determine the spatial extents of the network. The returned data will be within these extents.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">length</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of data elements to return in the `GeoDataFrame`.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">random_seed</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional random seed.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with data points for testing purposes.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="mock-landuse-categorical-data">
      <a aria-hidden="true" href="#mock-landuse-categorical-data" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>mock_landuse_categorical_data
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>mock_landuse_categorical_data(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">length=50, </div>
          <div class="yap func-sig-param">num_classes=10, </div>
          <div class="yap func-sig-param">random_seed=0)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a `numpy` array containing mock categorical data for testing or experimentation purposes.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` graph with `x` and `y` attributes. This is used in order to determine the spatial extents of the network. The returned data will be within these extents.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">length</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of categorical elements to return in the array.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">num_classes</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The maximum number of unique classes to return in the randomly assigned categorical data. The classes are randomly generated from a pool of unique class labels of length `num_classes`. The number of returned unique classes will be less than or equal to `num_classes`.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">random_seed</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional random seed.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with a "categorical_landuses" data column for testing purposes. The number of rows will match the `length` parameter. The categorical data will consist of randomly selected characters from `num_classes`.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="mock-numerical-data">
      <a aria-hidden="true" href="#mock-numerical-data" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>mock_numerical_data
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>mock_numerical_data(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">length=50, </div>
          <div class="yap func-sig-param">val_min=0, </div>
          <div class="yap func-sig-param">val_max=100000, </div>
          <div class="yap func-sig-param">num_arrs=1, </div>
          <div class="yap func-sig-param">floating_pt=3, </div>
          <div class="yap func-sig-param">random_seed=0)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a 2d `numpy` array containing mock numerical data for testing or experimentation purposes.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `NetworkX` graph with `x` and `y` attributes. This is used in order to determine the spatial extents of the network. The returned data will be within these extents.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">length</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of numerical elements to return in the array.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">val_min</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The (inclusive) minimum value in the `val_min`, `val_max` range of randomly generated integers.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">val_max</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The (exclusive) maximum value in the `val_min`, `val_max` range of randomly generated integers.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">num_arrs</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of arrays to nest in the returned 2d array.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">floating_pt</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The floating point precision
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">random_seed</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional random seed.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">GeoDataFrame</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `GeoDataFrame` with a "mock_numerical_x" data columns for testing purposes. The number of rows will match the `length` parameter. The numer of numerical columns will match the `num_arrs` paramter.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="mock-species-data">
      <a aria-hidden="true" href="#mock-species-data" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>mock_species_data
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>mock_species_data(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">random_seed=0)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Generate a series of randomly generated counts and corresponding probabilities.

 This function is used for testing diversity measures. The data is generated in varying lengths from randomly assigned integers between 1 and 10. Matching integers are then collapsed into species "classes" with probabilities computed accordingly.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">random_seed</div>
          <div class="yap doc-str-elem-type">int</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An optional random seed.
</Markdown></div>
      </div>
      <h3 class="yap">Yields</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">counts</div>
          <div class="yap doc-str-elem-type">ndarray[int]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The number of members for each species class.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">probs</div>
          <div class="yap doc-str-elem-type">ndarray[float]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The probability of encountering the respective species classes.
</Markdown></div>
      </div>
      <h3 class="yap">Examples</h3><Markdown is:raw>
```python
from cityseer.tools import mock

for counts, probs in mock.mock_species_data():
    cs = [c for c in counts]
    print(f'c = {cs}')
    ps = [round(p, 3) for p in probs]
    print(f'p = {ps}')

# c = [1]
# p = [1.0]

# c = [1, 1, 2, 2]
# p = [0.167, 0.167, 0.333, 0.333]

# c = [3, 2, 1, 1, 1, 3]
# p = [0.273, 0.182, 0.091, 0.091, 0.091, 0.273]

# c = [3, 3, 2, 2, 1, 1, 1, 2, 1]
# p = [0.188, 0.188, 0.125, 0.125, 0.062, 0.062, 0.062, 0.125, 0.062]

# etc.
```

</Markdown>
    </div>
  </section>
</div>
</PageLayout>

