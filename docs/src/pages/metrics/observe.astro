---
import Markdown from '@astrojs/markdown-component';
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>

<div class="yap module">
  <h1 class="yap module-title" id="cityseer-metrics-observe">
    <a aria-hidden="true" href="#cityseer-metrics-observe" tabindex="-1">
      <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
        <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
      </svg>
    </a>cityseer.metrics.observe
  </h1><Markdown is:raw>
Observe module for computing observations derived from `networkX` graphs.

 These methods are generally sufficiently simple that further computational optimisation is not required. Network centrality methods (which do require further computational optimisation due to their complexity) are handled separately in the [`networks`](/metrics/networks) module.
</Markdown>
  <section class="yap class">
    <h2 class="yap class-title" id="continuityentry">
      <a aria-hidden="true" href="#continuityentry" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>ContinuityEntry
    </h2><Markdown is:raw>
State management for an individual street continuity entry.

 This corresponds to an individual street name, route name or number, or highway type.
</Markdown>
    <h3 class="yap">Properties</h3>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">entry_name</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">count</div>
        <div class="yap class-prop-def-type">int</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">length</div>
        <div class="yap class-prop-def-type">float</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">edges</div>
        <div class="yap class-prop-def-type">dict[str, tuple[cityseer.tools.graphs.NodeKey, cityseer.tools.graphs.NodeKey, int]]</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <h3 class="yap">Methods</h3>
    <section class="yap func">
      <h2 class="yap func-title" id="continuityentry-init">
        <a aria-hidden="true" href="#continuityentry-init" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>ContinuityEntry.__init__
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>ContinuityEntry(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">entry_name)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Instances a continuity entry.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="continuityentry-generate-key">
        <a aria-hidden="true" href="#continuityentry-generate-key" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>ContinuityEntry.generate_key
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>generate_key(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">start_nd_key, </div>
            <div class="yap func-sig-param">end_nd_key, </div>
            <div class="yap func-sig-param">edge_idx)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Generate a unique key given uncertainty of start and end node order.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="continuityentry-add-edge">
        <a aria-hidden="true" href="#continuityentry-add-edge" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>ContinuityEntry.add_edge
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>add_edge(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">length, </div>
            <div class="yap func-sig-param">start_nd_key, </div>
            <div class="yap func-sig-param">end_nd_key, </div>
            <div class="yap func-sig-param">edge_idx)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Adds edge details to a continuity entry.
</Markdown></div>
    </section>
  </section>
  <section class="yap class">
    <h2 class="yap class-title" id="streetcontinuityreport">
      <a aria-hidden="true" href="#streetcontinuityreport" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>StreetContinuityReport
    </h2><Markdown is:raw>
State management for a collection of street continuity metrics.

 Each key in the `entries` attribute corresponds to a `ContinuityEntry`.
</Markdown>
    <h3 class="yap">Properties</h3>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">method</div>
        <div class="yap class-prop-def-type">str</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <div class="yap class-prop-elem-container">
      <div class="yap class-prop-def">
        <div class="yap class-prop-def-name">entries</div>
        <div class="yap class-prop-def-type">dict[str, cityseer.metrics.observe.ContinuityEntry]</div>
      </div>
      <div class="yap class-prop-def-desc"></div>
    </div>
    <h3 class="yap">Methods</h3>
    <section class="yap func">
      <h2 class="yap func-title" id="streetcontinuityreport-init">
        <a aria-hidden="true" href="#streetcontinuityreport-init" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>StreetContinuityReport.__init__
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>StreetContinuityReport(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">method)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Instance a street continuity report.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="streetcontinuityreport-scaffold-entry">
        <a aria-hidden="true" href="#streetcontinuityreport-scaffold-entry" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>StreetContinuityReport.scaffold_entry
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>scaffold_entry(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">entry_name)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Adds a new continuity entry to the report's entries.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="streetcontinuityreport-report-by-count">
        <a aria-hidden="true" href="#streetcontinuityreport-report-by-count" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>StreetContinuityReport.report_by_count
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>report_by_count(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">n_items=10)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Print a report sorted by entry counts.
</Markdown></div>
    </section>
    <section class="yap func">
      <h2 class="yap func-title" id="streetcontinuityreport-report-by-length">
        <a aria-hidden="true" href="#streetcontinuityreport-report-by-length" tabindex="-1">
          <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
          </svg>
        </a>StreetContinuityReport.report_by_length
      </h2>
      <div class="yap func-sig-content">
        <div class="yap func-sig">
          <span>report_by_length(</span>
          <div class="yap func-sig-params">
            <div class="yap func-sig-param">n_items=10)</div>
          </div>
        </div>
      </div>
      <div class="yap"><Markdown is:raw>
Print a report sorted by entry lengths.
</Markdown></div>
    </section>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="street-continuity">
      <a aria-hidden="true" href="#street-continuity" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>street_continuity
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>street_continuity(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph, </div>
          <div class="yap func-sig-param">method)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Compute the street continuity for a given graph.

 This requires a graph with `names`, `routes`, or `highways` edge keys corresponding to the selected `method` parameter. These keys are available if importing an OSM network with [`osm_graph_from_poly`](/tools/io#osm-graph-from-poly) or if importing OS Open Roads data with [nx_from_open_roads](/tools/io#nx-from-open-roads).
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms. Edges should contain "names", "routes", or "highways" keys corresponding to the specified `method` parameter.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">method</div>
          <div class="yap doc-str-elem-type">Union[str, tuple[str, str]]</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
The type of continuity metric to compute, where available options are "names", "routes", or "highways".
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A copy of the input `networkX` `MultiGraph` with new edge keys corresponding to the calculated route continuity metric. The metrics will be stored in 'length' and 'count' forms for the specified method, with keys formatted according to `f"{method}_cont_by_{form}"`. For example, when computing "names" continuity, the `names_cont_by_count` and `names_cont_by_length` keys will be added to the returned `networkX` `MultiGraph`.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">StreetContinuityReport</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An instance of [`StreetContinuityReport`](/metrics/observe#streetcontinuityreport) containing the computed state for the selected method.
</Markdown></div>
      </div>
    </div>
  </section>
  <section class="yap func">
    <h2 class="yap func-title" id="hybrid-street-continuity">
      <a aria-hidden="true" href="#hybrid-street-continuity" tabindex="-1">
        <svg aria-hidden="true" class="heading-icon" height="15px" viewBox="0 0 20 20" width="15px" xmlns="http://www.w3.org/2000/svg">
          <path clip-rule="evenodd" d="
M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z
" fill-rule="evenodd"></path>
        </svg>
      </a>hybrid_street_continuity
    </h2>
    <div class="yap func-sig-content">
      <div class="yap func-sig">
        <span>hybrid_street_continuity(</span>
        <div class="yap func-sig-params">
          <div class="yap func-sig-param">nx_multigraph)</div>
        </div>
      </div>
    </div>
    <div class="yap"><Markdown is:raw>
Compute the street continuity for a given graph using a hybridisation of routes and names continuity.

 Hybrid continuity merges route continuity and street continuity information where a route overlaps a street continuity.
</Markdown>
      <h3 class="yap">Parameters</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name">nx_multigraph</div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A `networkX` `MultiGraph` in a projected coordinate system, containing `x` and `y` node attributes, and `geom` edge attributes containing `LineString` geoms. Edges should contain "names", "routes", or "highways" keys corresponding to the specified `method` parameter.
</Markdown></div>
      </div>
      <h3 class="yap">Returns</h3>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">MultiGraph</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
A copy of the input `networkX` `MultiGraph` with new edge keys corresponding to the calculated route continuity metric. The metrics will be stored in 'hybrid_cont_by_length' and 'hybrid_cont_by_count' keys.
</Markdown></div>
      </div>
      <div class="yap doc-str-elem-container">
        <div class="yap doc-str-elem-def">
          <div class="yap doc-str-elem-name"></div>
          <div class="yap doc-str-elem-type">StreetContinuityReport</div>
        </div>
        <div class="yap doc-str-elem-desc"><Markdown is:raw>
An instance of [`StreetContinuityReport`](/metrics/observe#streetcontinuityreport) containing the computed state for the "hybrid" method.
</Markdown></div>
      </div>
    </div>
  </section>
</div>
</PageLayout>

