[project]
name = "cityseer"
dynamic = ["version"]
description = "Computational tools for network-based pedestrian-scale urban analysis"
readme = "README.md"
requires-python = ">=3.9, <3.10"
license = { text = "AGPL-3.0" }
keywords = [
    "network-topology",
    "numpy",
    "architecture",
    "openstreetmap",
    "urban-planning",
    "python3",
    "networkx",
    "networks",
    "spatial-analysis",
    "geographical-information-system",
    "spatial-data",
    "morphometrics",
    "network-analysis",
    "momepy",
    "numba",
    "spatial-data-analysis",
    "centrality",
    "shapely",
    "landuse",
    "osmnx",
    "network-centralities",
]
authors = [{ name = "Gareth Simons", email = "info@benchmarkurbanism.com" }]
maintainers = [{ name = "Gareth Simons", email = "info@benchmarkurbanism.com" }]
classifiers = ["Programming Language :: Python :: 3"]
dependencies = [
    "matplotlib>=3.5.1",
    "networkx>=2.7.1",
    "numba>=0.55.1",
    "pyproj>=3.3.0",
    "requests>=2.27.1",
    "scikit-learn>=1.0.2",
    "tqdm>=4.63.1",
    "numba-progress>=0.0.2",
    "utm>=0.7.0",
    "shapely>=1.8.2",
    "numpy>=1.21.6",
]

[project.optional-dependencies]
[tool.pdm.dev-dependencies]
dev = [
    "pytest>=7.1.1",
    "osmnx>=1.1.2",
    "momepy>=0.5.2",
    "yapper>=0.2.1",
    "setuptools-scm>=6.4.2",
    "jupyter>=1.0.0",
    "pre-commit>=2.18.1",
    "mypy>=0.950",
    "pylint>=2.13.7",
    "black>=22.3.0",
    "isort>=5.10.1",
    "pydocstyle>=6.1.1",
    "types-requests>=2.27.25",
    "jupyter-black>=0.3.1",
    "coverage>=6.3.2",
]

[project.urls]
homepage = "https://cityseer.benchmarkurbanism.com/"
documentation = "https://cityseer.benchmarkurbanism.com/"
repository = "https://github.com/benchmark-urbanism/cityseer-api"

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["cityseer"]

[tool.setuptools_scm]
write_to = "cityseer/_version.py"

[tool.black]
line-length = 120
color = true

[tool.pylint.master]
ignore = ["_version.py"]
disable = [
    "too-many-branches",
    "too-many-statements",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-lines",
    "missing-module-docstring",
    "pointless-string-statement",
    "logging-fstring-interpolation",
]
jobs = 0
output-format = "colorized"

[tool.pylint.basic]
good-names = [
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "i",
    "j",
    "m",
    "n",
    "q",
    "x",
    "y",
    "ax",
    "js",
    "mu",
    "qs",
    "wt",
]

[tool.pylint.design]
max-args = 10

[tool.pylint.format]
max-line-length = 120

[tool.pylint.logging]
logging_format_style = "new"

# TODO: warn_unused_ignores is false now as workaround for spurious "Module "numba" has no attribute "njit""
[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]
files = ["cityseer", "demos", "tests"]
exclude = ["__pypackages__", "build", "docs"]
namespace_packages = true
explicit_package_bases = true
python_version = "3.9"
strict_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_return_any = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "matplotlib",
    "matplotlib.pyplot",
    "matplotlib.collections",
    "matplotlib.colors",
    "networkx",
    "numba",
    "numba.core",
    "numba.typed",
    "numba_progress",
    "numpy",
    "numpy.typing",
    "osmnx",
    "pandas",
    "pytest",
    "requests",
    "scipy",
    "scipy.stats",
    "shapely",
    "sklearn",
    "sklearn.preprocessing",
    "tensorflow",
    "tensorflow.keras",
    "tqdm.auto",
    "utm",
]
ignore_missing_imports = true

[tool.pydocstyle]
# http://www.pydocstyle.org/en/stable/error_codes.html
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D200", # One-line docstring should fit on one line with quotes
    "D203", # 1 blank line required before class docstring
    "D403", # First word of the first line should be properly capitalized
    "D212", # Multi-line docstring summary should start at the first line
]
match = "(?!test_).*\\.py"
match_dir = "^(?!(__pypackages__|build|demos|docs|tests)).*"

[tool.isort]
profile = "black"
skip_gitignore = true
line_length = 120
known_first_party = ["cityseer"]
atomic = true
filter_files = true
src_paths = ["cityseer", "demos", "tests", "docs"]

[tool.pytest.ini_options]
console_output_style = "count"
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests"]
addopts = "--ignore=tests/test_performance.py"

[tool.coverage.run]
source = ["cityseer"]
branch = true
omit = [
    "**/__init__.py",
    "cityseer/algos/**",      # NOTE: coverage can't trace jitted files
    "cityseer/_version.py",
    "cityseer/config.py",
    "cityseer/tools/plot.py",
]

[tool.coverage.report]
include = ["cityseer/**"]
omit = [
    "**/__init__.py",
    "cityseer/algos/**",      # NOTE: coverage can't trace jitted files
    "cityseer/_version.py",
    "cityseer/config.py",
    "cityseer/tools/plot.py",
]

[tool.pdm.scripts]
docstyle = "pydocstyle --config=pyproject.toml"
build_docs = { shell = "pdm run docstyle && pdm run yapper --config=./docs/.yap_config.yaml" }
docs_dev = { shell = "pdm run build_docs && pnpm --prefix ./docs dev" }
docs_build = { shell = "pdm run build_docs && pnpm --prefix ./docs build" }
docs_preview = { shell = "pdm run build_docs && pnpm --prefix ./docs preview" }
formatting = { shell = "black --config=pyproject.toml ./ && isort --settings-file=pyproject.toml ./" }
typechecks = "mypy --config-file=pyproject.toml"
linting = "pylint --rcfile=pyproject.toml ./cityseer"
tests = "pytest ./tests"
# coverage can't trace jitted files
coverage_run = "coverage run -m pytest ./tests"
coverage_report = { shell = "coverage report --show-missing --skip-empty && coverage lcov" }
build = { shell = "pdm run formatting && pdm run typechecks && pdm run linting && pdm run tests && python -m build" }
publish = { shell = "pdm run build && pdm run build_docs && pdm publish -u shongololo -v" }
