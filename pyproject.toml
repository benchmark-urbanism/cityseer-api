[project]
name = "cityseer"
version = '3.2.0'
description = "Computational tools for network-based pedestrian-scale urban analysis"
readme = "README.md"
requires-python = ">=3.8, <3.11"
license = { text = "AGPL-3.0" }
keywords = [
  "network-topology",
  "numpy",
  "architecture",
  "openstreetmap",
  "urban-planning",
  "python3",
  "networkx",
  "networks",
  "spatial-analysis",
  "geographical-information-system",
  "spatial-data",
  "morphometrics",
  "network-analysis",
  "momepy",
  "numba",
  "spatial-data-analysis",
  "centrality",
  "shapely",
  "landuse",
  "osmnx",
  "network-centralities",
]
authors = [{ name = "Gareth Simons", email = "info@benchmarkurbanism.com" }]
maintainers = [{ name = "Gareth Simons", email = "info@benchmarkurbanism.com" }]
classifiers = [
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
dependencies = [
  "matplotlib>=3.5.1",
  "networkx>=2.7.1",
  "pyproj>=3.3.0",
  "requests>=2.27.1",
  "scikit-learn>=1.0.2",
  "tqdm>=4.63.1",
  "utm>=0.7.0",
  "shapely>=1.8.2",
  "numba>=0.55.2",
  "numpy>=1.22.4",
  "numba-progress>=0.0.3",
  "geopandas>=0.10.2",
]

[project.urls]
homepage = "https://cityseer.benchmarkurbanism.com/"
documentation = "https://cityseer.benchmarkurbanism.com/"
repository = "https://github.com/benchmark-urbanism/cityseer-api"

[project.optional-dependencies]
[tool.pdm.dev-dependencies]
dev = [
  "pytest>=7.1.1",
  "osmnx>=1.1.2",
  "momepy>=0.5.2",
  "setuptools-scm>=6.4.2",
  "pylint>=2.13.7",
  "black>=22.3.0",
  "isort>=5.10.1",
  "pydocstyle>=6.1.1",
  "jupyter-black>=0.3.1",
  "coverage>=6.3.2",
  "pyright>=1.1.246",
  "pandas-stubs>=1.2.0.58",
  "types-requests>=2.27.27",
  "pyogrio>=0.4.0",
  "jupyterlab>=3.4.3",
  "jupyter>=1.0.0",
  "yapper>=0.3.4",
]

# [tool.pdm]
# allow_prereleases = true

# [[tool.pdm.source]]
# url = "https://test.pypi.org/simple"
# name = "test"
# verify_ssl = true

[tool.pdm.scripts]
docstyle = "pydocstyle --config=pyproject.toml"
build_docs = { shell = "pdm run docstyle && pdm run yapper" }
docs_dev = { shell = "pdm run build_docs && pnpm --prefix ./docs dev" }
docs_build = { shell = "pdm run build_docs && pnpm --prefix ./docs build" }
docs_preview = { shell = "pdm run build_docs && pnpm --prefix ./docs preview" }
formatting = { shell = "black --config=pyproject.toml ./ && isort --settings-file=pyproject.toml ./" }
typechecks = "pyright ."
linting = "pylint --rcfile=pyproject.toml ./cityseer"
tests = "pytest ./tests"
# coverage can't trace jitted files
coverage_run = "coverage run pytest"
coverage_report = { shell = "coverage report --show-missing --skip-empty && coverage lcov" }
build_project = { shell = "pdm run formatting && pdm run linting && pdm run typechecks && pdm run tests && pdm build" }

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 120
color = true

[tool.pylint.master]
disable = [
  "too-many-branches",
  "too-many-statements",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-arguments",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-few-public-methods",
  "missing-module-docstring",
  "no-name-in-module",
  "pointless-string-statement",
  "logging-fstring-interpolation",
  "R0801",
]
jobs = 0
output-format = "colorized"

[tool.pylint.basic]
good-names = [
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "i",
  "j",
  "m",
  "n",
  "q",
  "x",
  "y",
  "ax",
  "js",
  "mu",
  "qs",
  "xs",
  "ys",
  "wt",
]

[tool.pylint.design]
max-args = 10

[tool.pylint.format]
max-line-length = 120

[tool.pylint.logging]

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
pythonVersion = "3.9"
include = ["cityseer"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "**/__pypackages__",
  "build",
  "demos",
  "docs",
  "**/temp/",
  "tests/",
  "cityseer/stubs",
  "dist",
]
typeCheckingMode = "strict"
stubPath = "cityseer/stubs"
useLibraryCodeForTypes = true
reportUntypedFunctionDecorator = false
reportUntypedClassDecorator = false
reportUnknownMemberType = false
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false

[tool.pydocstyle]
# http://www.pydocstyle.org/en/stable/error_codes.html
ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D200", # One-line docstring should fit on one line with quotes
  "D203", # 1 blank line required before class docstring
  "D401", # First line should be in imperative mood.
  "D403", # First word of the first line should be properly capitalized
  "D212", # Multi-line docstring summary should start at the first line
]
match = "(?!test_).*\\.py"
match_dir = "^(?!(__pypackages__|build|demos|docs|tests)).*"

[tool.isort]
profile = "black"
skip_gitignore = true
line_length = 120
known_first_party = ["cityseer"]
atomic = true
filter_files = true
src_paths = ["cityseer", "demos", "tests", "docs"]

[tool.pytest.ini_options]
console_output_style = "count"
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests"]
addopts = "--ignore=tests/test_performance.py"

[tool.coverage.run]
source = ["cityseer"]
branch = true
omit = [
  "**/__init__.py",
  "cityseer/algos/**",      # NOTE: coverage can't trace jitted files
  "cityseer/config.py",
  "cityseer/tools/plot.py",
]

[tool.coverage.report]
include = ["cityseer/**"]
omit = [
  "**/__init__.py",
  "cityseer/algos/**",      # NOTE: coverage can't trace jitted files
  "cityseer/config.py",
  "cityseer/tools/plot.py",
]

[tool.yapper]
package_root_relative_path = './'
intro_template = """
---
import { Markdown } from 'astro/components'
import ArXivLink from '@src/components/ArXivLink.vue'
import PageLayout from '@src/layouts/PageLayout.astro'
---
<PageLayout>
"""
outro_template = """
</PageLayout>
"""
module_map = [
  { module = "cityseer.structures", py = "cityseer/structures.py", astro = "docs/src/pages/structures.astro" },
  { module = "cityseer.metrics.layers", py = "cityseer/metrics/layers.py", astro = "docs/src/pages/metrics/layers.astro" },
  { module = "cityseer.metrics.networks", py = "cityseer/metrics/networks.py", astro = "docs/src/pages/metrics/networks.astro" },
  { module = "cityseer.tools.graphs", py = "cityseer/tools/graphs.py", astro = "docs/src/pages/tools/graphs.astro" },
  { module = "cityseer.tools.mock", py = "cityseer/tools/mock.py", astro = "docs/src/pages/tools/mock.astro" },
  { module = "cityseer.tools.plot", py = "cityseer/tools/plot.py", astro = "docs/src/pages/tools/plot.astro" },
]
